/**
 * Testsuite for SpaceCalculation.ycp module
 *
 */

{

include "testsuite.ycp";
map READ = $[
  "target" : $[
    "tmpdir" : "/tmp"
  ]
];
TESTSUITE_INIT ([READ], nil);

import "SpaceCalculation";

// size units - multiplies of kB blocks
integer mb = 1 << 10;
integer gb = 1 << 20;
integer tb = 1 << 30;

map part = $[
    // 5GB
    "size_k"	: 5 * gb,
    "used_fs" : `ext2,
    "name" : "sda1"
];

DUMP(" ----- Journal size tests ----- ");
DUMP("Ext2/3/4 journal size tests");

// ext2 => no journal => 0
TEST(``(SpaceCalculation::ExtJournalSize(part)), [], nil);

// 128MB
part["used_fs"] = `ext3;
TEST(``(SpaceCalculation::ExtJournalSize(part)), [], nil);

// 128MB
part["used_fs"] = `ext4;
TEST(``(SpaceCalculation::ExtJournalSize(part)), [], nil);

// 2 MB is too small => 0
part["size_k"] = 2 * mb;
TEST(``(SpaceCalculation::ExtJournalSize(part)), [], nil);

// 2GB => 64MB
part["size_k"] = 2 * gb;
TEST(``(SpaceCalculation::ExtJournalSize(part)), [], nil);

// 2GB but 1k blocks => 32MB
part["fs_options"] = $["opt_blocksize" : $[ "option_value" : "1024" ]];
TEST(``(SpaceCalculation::ExtJournalSize(part)), [], nil);

// no journal option => 0
part["fs_options"] = $["no_journal" : $[ "option_value" : true ]];
TEST(``(SpaceCalculation::ExtJournalSize(part)), [], nil);


DUMP("ReiserFS journal size tests");

part["fs_options"] = $[];
part["used_fs"] = `reiser;

// the default is 32MB + 4kB regardeless fs size
TEST(``(SpaceCalculation::ReiserJournalSize(part)), [], nil);


DUMP("XFS journal size tests");

part["used_fs"] = `xfs;

// too small => 10 MB min size
TEST(``(SpaceCalculation::XfsJournalSize(part)), [], nil);

// medium size => 26MB
part["size_k"] = 50 * gb;
TEST(``(SpaceCalculation::XfsJournalSize(part)), [], nil);

// too large => 2GB max size
part["size_k"] = 5 * tb;
TEST(``(SpaceCalculation::XfsJournalSize(part)), [], nil);



DUMP("JFS journal size tests");

part["used_fs"] = `jfs;

// medium size
part["size_k"] = 5 * gb;
TEST(``(SpaceCalculation::JfsJournalSize(part)), [], nil);

// medium size, add few kB more so it's rounded one MB up
part["size_k"] = (5 * gb) + 5;
TEST(``(SpaceCalculation::JfsJournalSize(part)), [], nil);

// too large => 128MB max size
part["size_k"] = 50 * gb;
TEST(``(SpaceCalculation::JfsJournalSize(part)), [], nil);

// user defined size (in MB)
part["fs_options"] = $["opt_log_size" : $[ "option_value" : "10" ]];
TEST(``(SpaceCalculation::JfsJournalSize(part)), [], nil);
part["fs_options"] = $[];

DUMP(" ----- Extfs reserved space tests ----- ");

// no reserved space
TEST(``(SpaceCalculation::ReservedSpace(part)), [], nil);

// 0%
part["fs_options"] = $["opt_reserved_blocks" : $[ "option_value" : "0.0" ]];
TEST(``(SpaceCalculation::ReservedSpace(part)), [], nil);

// 5% of 50GB => 2.5GB
part["fs_options"] = $["opt_reserved_blocks" : $[ "option_value" : "5.0" ]];
TEST(``(SpaceCalculation::ReservedSpace(part)), [], nil);

// 12.50% of 50GB => 6.25GB
part["fs_options"] = $["opt_reserved_blocks" : $[ "option_value" : "12.50" ]];
TEST(``(SpaceCalculation::ReservedSpace(part)), [], nil);

DUMP(" ----- Fs overhead tests ----- ");

// 5GB partition
part["size_k"] = 5 * gb;

// ext2
part["used_fs"] = `ext2;
TEST(``(SpaceCalculation::EstimateFsOverhead(part)), [], nil);

// ext3
part["used_fs"] = `ext3;
TEST(``(SpaceCalculation::EstimateFsOverhead(part)), [], nil);

// ext4
part["used_fs"] = `ext4;
TEST(``(SpaceCalculation::EstimateFsOverhead(part)), [], nil);

// xfs
part["used_fs"] = `xfs;
TEST(``(SpaceCalculation::EstimateFsOverhead(part)), [], nil);

// jfs
part["used_fs"] = `jfs;
TEST(``(SpaceCalculation::EstimateFsOverhead(part)), [], nil);

// reiser
part["used_fs"] = `reiser;
TEST(``(SpaceCalculation::EstimateFsOverhead(part)), [], nil);

// btrfs
part["used_fs"] = `btrfs;
TEST(``(SpaceCalculation::EstimateFsOverhead(part)), [], nil);



DUMP(" ----- Target usage tests ----- ");

// test invalid input
TEST(``(SpaceCalculation::EstimateTargetUsage(nil)), [], nil);
TEST(``(SpaceCalculation::EstimateTargetUsage([])), [], nil);

// single partition
TEST(``(SpaceCalculation::EstimateTargetUsage([$["name":"/", "used":0, "free":10000000]])), [], nil);

// multiple partitions, separate /home (nothing to install)
TEST(``(SpaceCalculation::EstimateTargetUsage([$["name":"/", "used":0, "free":10000000],
    $["name":"/home", "used":0, "free":1000000]])), [], nil);

// multiple partitions
TEST(``(SpaceCalculation::EstimateTargetUsage([$["name":"/", "used":0, "free":10000000],
    $["name":"/boot", "used":0, "free":1000000],
    $["name":"/usr", "used":0, "free":1000000]])), [], nil);

}
