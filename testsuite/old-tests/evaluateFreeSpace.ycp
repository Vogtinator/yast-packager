/*
 * Test evaluateFreeSpace
 */

{
  include "testsuite.ycp";
  
  //
  // this is former used define evaluate free space
  //
  global define evaluateFreeSpace( string updateTarget ) ``{
      list partition = [];

      // get information about diskspace ( used/free space on every partition )
      partition = SCR::Read(.run.df );

      y2debug( "DF DF DF: %1", partition );


      // filter out headline and other invalid entries
      partition = filter( `part, partition, ``( substring ( lookup( part, "name", "" ), 0, 1 ) == "/" ) );

      // pkginfo expects names of partitions without "/" in front ( exception: "/" itself )
      list part_input = [];

      foreach( `part, partition, ``{
	  string partName = lookup( part, "name", "" );

	  if ( updateTarget == "/mnt" && // update have been startet from
	                                 // CD.
	       size ( partName ) >= 4 &&
	       substring ( partName, 0, 4 ) == "/mnt" )
	  {
	      string mount = substring ( partName, 4 );
	      map part_info = $[];
	      if ( size ( mount ) == 0 )
	      {
		  part_info = add( part_info, "name", "/"  );
	      }
	      else
	      {
		  // this was code line in inst_sw_backup - but why ????
		  // part_info = add( part_info, "name",  mount ); 
		  part_info = add( part_info, "name",  substring ( mount, 1 ) ); // removing "/"
	      }
	      part_info = add( part_info, "used",  tointeger(lookup( part, "used", 0 )) );
	      part_info = add( part_info, "free",  tointeger(lookup( part, "free", 0 )) );

	      part_input = add( part_input, part_info );
	  }
	  if ( updateTarget == "/" ) // update have been startet from running
	                             // system.
	  {
	      map part_info = $[];
	      if ( partName == "/" )
	      {
		  part_info = add( part_info, "name", "/"  );
	      }
	      else
	      {
		  part_info = add( part_info, "name",  substring ( partName, 1 ) ); // removing "/"
	      }
	      part_info = add( part_info, "used", tointeger(lookup( part, "used", 0 )) );
	      part_info = add( part_info, "free", tointeger(lookup( part, "free", 0 )) );
	      part_input = add( part_input, part_info );
	  }
      });

      return part_input;
  };
  
  // -------------------------------------------------------------------------


  map read = 	$["run": $["df": [
				  $["dummy":"on",
				   "free":"Available",
				   "name":"Mounted",
				   "prz":"Capacity",
				   "spec":"Filesystem",
				   "used":"Used",
				   "whole":"1024-blocks"],
				  $["free":"391366",
				   "name":"/",
				   "prz":"80%",
				   "spec":"/dev/sda1",
				   "used":"1487222",
				   "whole":"1981000"],
				  $["free":"1976745",
				   "name":"/usr",
				   "prz":"69%",
				   "spec":"/dev/sda3",
				   "used":"4227733",
				   "whole":"6543449"],
				  $["free":"7364356",
				   "name":"/suse/gs",
				   "prz":"94%",
				   "spec":"wotan:/real-home/gs",
				   "used":"100635672",
				   "whole":"108000028"],
				  $["free":"55126192",
				   "name":"/mounts/work",
				   "prz":"62%",
				   "spec":"Hilbert:/work",
				   "used":"88241460",
				   "whole":"143367652"]]
  ]]; 							 // first READ probes CD drives

  TEST ( ``(evaluateFreeSpace ( "/" )), [ read, $[], $[] ], [] ); 

  read = 	$["run": $["df": [
				  $["dummy":"on",
				   "free":"Available",
				   "name":"Mounted",
				   "prz":"Capacity",
				   "spec":"Filesystem",
				   "used":"Used",
				   "whole":"1024-blocks"],
				  $["free":"391366",
				   "name":"/mnt",
				   "prz":"80%",
				   "spec":"/dev/sda1",
				   "used":"1487222",
				   "whole":"1981000"],
				  $["free":"1976745",
				   "name":"/mnt/usr",
				   "prz":"69%",
				   "spec":"/dev/sda3",
				   "used":"4227733",
				   "whole":"6543449"],
				  $["free":"7364356",
				   "name":"/suse/gs",
				   "prz":"94%",
				   "spec":"wotan:/real-home/gs",
				   "used":"100635672",
				   "whole":"108000028"],
				  $["free":"55126192",
				   "name":"/mounts/work",
				   "prz":"62%",
				   "spec":"Hilbert:/work",
				   "used":"88241460",
				   "whole":"143367652"]]
  ]];
   
 TEST ( ``(evaluateFreeSpace ( "/mnt") ), [ read, $[], $[] ], [] ); 


  // -------------------------------------------------------------------------

  

}
