/**
 * Module: 		inst_source.ycp
 *
 * Authors:		Klaus Kaempf <kkaempf@suse.de>
 *			Gabriele Strattner <gs@suse.de>
 *			Stefan Schubert <schubi@suse.de>
 *                      Cornelius Schumacher <cschum@suse.de>
 *
 * Purpose:
 * Displays possibilities to install from NFS, CD or partion
 * Do the "mount" for testing the input.
 *
 * $Id$
 */

{
    textdomain "packager";

    import "Mode";
    import "Installation";

    import "Wizard";

    include "ui/common_messages.ycp";
    include "ui/common_functions.ycp";
    include "ui/common_popups.ycp";
    include "ui/file_popups.ycp";

    include "inst_source_dialogs.ycp";

    any 	ret = nil;

    //
    //  Settings for Online Update
    //

    global define SetOnlineUpdateInfo( integer mediatype ) ``{

	if ( mediatype == 0 )	// CD
	{
	    Mode::youInstallMap["you_serverkind"] = "cd";
	    Mode::youInstallMap["you_server"] 	= "CD";		// text for YOU combobox
	    Mode::youInstallMap["you_dir"] 	= "";
	}
	if ( mediatype == 1 )	// DVD
	{
	    Mode::youInstallMap["you_serverkind"] = "cd";
	    Mode::youInstallMap["you_server"] 	= "DVD";	// text for YOU combobox
	    Mode::youInstallMap["you_dir"] 	= "";
	}
	else if ( mediatype == 2
		  || mediatype == 4
		  || mediatype == 6 )	//FTP / HTTP / NFS
	{
	    if (  mediatype == 2 )
		Mode::youInstallMap["you_serverkind"] = "nfs";
	    else if ( mediatype == 4 )
		Mode::youInstallMap["you_serverkind"] = "ftp";
	    else if ( mediatype == 6 )
		Mode::youInstallMap["you_serverkind"] = "http";

	    string server = UI::QueryWidget(`id(`server), `Value);
	    string dir    = UI::QueryWidget(`id(`dir), `Value);

	    Mode::youInstallMap["you_server"] = CutBlanks( server ) ;
	    Mode::youInstallMap["you_dir"] = CutBlanks( dir );
	}
	else if ( mediatype == 3 )	// Harddisk
	{
	    Mode::youInstallMap["you_serverkind"] = "harddisk";

	    string partition = UI::QueryWidget(`id(`partdir), `Value);

	    Mode::youInstallMap["you_dir"]	= CutBlanks( partition );
	    Mode::youInstallMap["you_server"] 	= "Hard disk";  // text for YOU combobox
	}
    };

    //
    //	Check whether the source medium is mountable
    //

    define CheckMount( integer mediatype ) ``{
	boolean mount_ok = false;

	// umount /var/adm/mount (to get rid of an old, unused, invalid mount)
	SCR::Execute (.target.umount, Installation::sourcedir);

	if ( mediatype == 0 )	// CD
	{
	    // defaults to /dev/cdrom
	    InstMedia::initializeInstMedia($["instmode" : "cd"]);
	}
	if ( mediatype == 1 )	// DVD
	{
	    // defaults to /dev/dvd
	    InstMedia::initializeInstMedia($["instmode" : "dvd"]);
	}
	else if ( mediatype == 2 )	// NFS
	{
	    string server = UI::QueryWidget(`id(`server), `Value);
	    string dir    = UI::QueryWidget(`id(`dir), `Value);

	    // remove blanks at the beginning and end of server and dir
	    server = CutBlanks( server );
	    dir    = CutBlanks( dir );

	    InstMedia::initializeInstMedia($["instmode" : "nfs",
					     "server"   : server,
					     "serverdir" : dir]);
	}
	else if ( mediatype == 3 )	// Harddisk
	{
	    // Harddisk -> check directory
	    string hddir = UI::QueryWidget(`id(`partdir), `Value);
	    hddir = CutBlanks( hddir );

	    InstMedia::initializeInstMedia($["instmode" : "hd",
					     "serverdir": hddir,
					     "partition": ""]);
	}
	else if ( mediatype == 4)	// FTP
	{
	    InstMedia::initializeInstMedia($["instmode" : "ftp"]);
	}
	else if ( mediatype == 5)	// SMB
	{
	    string server = UI::QueryWidget(`id(`server), `Value);
	    string dir    = UI::QueryWidget(`id(`dir), `Value);
	    // usually the Samba share name doesn't start with "/"
	    if ( substring ( dir, 0, 1) != "/" )
	    {
		dir = "/" + dir;
	    }

	    // remove blanks at the beginning and end of server and dir
	    server = CutBlanks( server );
	    dir    = CutBlanks( dir );

	    InstMedia::initializeInstMedia($["instmode" : "smb",
					    "server"   : server,
					    "serverdir" : dir,
					    "username"  : smb_user,
					    "password" : smb_password,
					    "asworkgroup": smb_asworkgroup,
					    "workdomain" : smb_workgroup
					    ]);
	}
	else if ( mediatype == 6)	// HTTP
	{
	    InstMedia::initializeInstMedia($["instmode" : "http"]);
	}
	else if ( mediatype == 7)	// TFTP
	{
	    InstMedia::initializeInstMedia($["instmode" : "tftp"]);
	}

	InstMedia::gatherReleaseData();

	mount_ok = MediaUI::ChangeMedium( 1, true );
	y2milestone ("CheckMount (%1) = %2", mediatype, mount_ok);

	if ( mount_ok )
	{
	    // CD1 (or directory with CD1 packages is found)
	    // set flag for Packages::Init(): get information from
	    // source medium not locally save description
	    InstMedia::source_medium = true;

	}
	if ( InstMedia::mediatype <= 1 )
	{
	    // go on in case of CD, DVD because the CD
	    // can be inserted later on
	    mount_ok = true;
	}
	return mount_ok;
    };

    string smb_password = "";
    string smb_user = "";
    string smb_workgroup = "";
    string smb_asworkgroup = "";

    //
    // SambaPopup()
    //

    global define SambaPopup() ``{
       map ret_map = $[];

       UI::OpenDialog(
		      `opt(`decorated),
		      `HBox(
			    `HSpacing(1),
			    `VBox(
				  // title of a popup
				  `Left(`Heading( _("Samba configuration" )) ),
				  `VSpacing(0.5),
				  // popup text samba configuration
				  `Label( _("If you want to access as guest, you don't need
to specify username, password and workgroup.") ),
				  `VSpacing(0.5),
				  // checkbox label
				  `CheckBox(`id(`guest), `opt(`notify), _("&Guest login"), true ),
				  `VSpacing(0.3),
				  `Frame( "",
					  `VBox(
						`HBox(
						      `HSpacing (0.5),
						      // inputfield label
						      `TextEntry (`id(`user), _("&Username:"), smb_user),
						      `HSpacing (0.5)
						      ),
						`HBox(
						      `HSpacing (0.5),
						      // inputfield label
						      `Password (`id(`password), _("&Password:"), smb_password),
						      `HSpacing (0.5)
						      ),
						`HBox(
						      `HSpacing (0.5),
						      // inputfield label
						      `TextEntry (`id(`workgroup), _("&Workgroup:"), smb_workgroup),
						      `HSpacing (0.5)
						      )
						)
					  ),
				  `HBox(`PushButton(`id(`ok), `opt(`default), OKButtonLabel() ),
					`PushButton(`id(`cancel), CancelButtonLabel() )
					),
				  `VSpacing(0.2)
				  ),
			    `HSpacing(1)
			    )
		      );

       symbol ret = `none;
       boolean enable = false;
       UI::ChangeWidget( `id(`user), `Enabled, enable );
       UI::ChangeWidget( `id(`password), `Enabled, enable );
       UI::ChangeWidget( `id(`workgroup), `Enabled, enable );

       while ( true )
       {
	   smb_password = "";
	   smb_user = "";
	   smb_workgroup = "";
	   smb_asworkgroup = "";

	   ret =   UI::UserInput();

	   if ( ret == `cancel )
	       break;

	   if ( UI::QueryWidget(`id(`guest), `Value) )
	   {
	       enable = false;
	   }
	   else
	   {
	       enable = true;
	   }

	   UI::ChangeWidget( `id(`user), `Enabled, enable );
	   UI::ChangeWidget( `id(`password), `Enabled, enable );
	   UI::ChangeWidget( `id(`workgroup), `Enabled, enable );

	   if ( ret == `ok )
	   {
	       // it is not a guest login
	       if ( ! UI::QueryWidget(`id(`guest), `Value) )
	       {
		   smb_password = UI::QueryWidget(`id(`password), `Value);
		   smb_user =  UI::QueryWidget(`id(`user), `Value);
		   smb_workgroup = UI::QueryWidget(`id(`workgroup), `Value);
		   if (smb_workgroup != "")
		   {
		       smb_asworkgroup = "1";
		   }
	       }
	       break;
	   }
       }

       UI::CloseDialog();

       return ret;
    }
    

    integer numSources = 0;

    /**
        Exchange two items of a Table.
        @param index1 Index of first item.
        @param index2 Index of second item.
        @return true on success, false on error.
    */
    global define boolean exchangeTableItems( integer index1, integer index2 ) ``{
        term item1 = UI::QueryWidget( `id( `table ), `Item( index1 ) );
        if ( item1 == nil ) { return false; }
        term item2 = UI::QueryWidget( `id( `table ), `Item( index2 ) );
        if ( item2 == nil ) { return false; }
        integer i = 2;
        while ( i < size( item1 ) )
        {
            any value1 = select( item1, i, 0 );
            any value2 = select( item2, i, 0 );
            UI::ChangeWidget( `id( `table ), `Item( index1, i - 1 ), value2 );
            UI::ChangeWidget( `id( `table ), `Item( index2, i - 1 ), value1 );
            i = i + 1;
        }
        return true;
    }

    /**
        Create a table item from a map as returned by the InstSrcManager agent.
        @param source The map describing the source as returned form the agent.
        @return An item suitable for addition to a Table.
    */
    global define term createItem( integer source ) ``{
        map generalData = Pkg::SourceGeneralData( source );
        map productData = Pkg::SourceProductData( source );
        term item = `item(
            `id( source ),
            lookup( generalData, "enabled", true ) ? "On" : "Off",
            lookup( productData, "label", "unknown" ),
            lookup( generalData, "url", "" )
        );
        return item;
    }

    /**
        Fill sources table with entries from the InstSrcManager agent.
    */        
    global define void fillTable() ``{
        list(integer) sources = Pkg::SourceGetCurrent ( false );
 
        list items = [];
 
        numSources = size( sources );
    
        integer i = 0;
        while ( i < numSources ) {
            items = add( items, createItem( select( sources, i, nil ) ) );
            i = i + 1;
        }
        
        UI::ChangeWidget( `id( `table ), `Items, items );
    }

    define void createSource( string url ) ``{
        if ( url != "" )
        {
//            UI::MessagePopup( sformat( "URL: %1", url ) );
            integer id = Pkg::SourceCreate( url );
            if ( id == nil )
            {
                string _msg1 = sformat( _("Unable to create installation source
from URL '%1'."), url );
                string err = Pkg::ErrorId();
                string _msg2 = "";
                if ( err != "ok" ) {
                    if ( err == "instsrc_duplicate" )
                        _msg2 = _("A source with the same product already exists.");
                    else
                        _msg2 = _("Details:") + "\n" + Pkg::Error();
                }
                UI::ErrorPopup( _msg1 + "\n" + _msg2 );
            }
            else
            {
                fillTable();
            }
        }
    }

    list items = [];

    string editButtonLabel = _("&Edit...");
    string deleteButtonLabel = _("&Delete");
    string upButtonLabel = _("&Up");
    string downButtonLabel = _("D&own");
    string enableButtonLabel = _("Enab&le/Disable");

    term contents =
	`VBox(
	      `HBox(
		    `Table( `id( `table ), `opt( `keepSorting ),
			   `header(
				   _( "Status" ),
                                   _( "Name" ),
				   _( "URL" )
				   ),
			   items
			   ),
		    `HSpacing()
		    ),
	      `HBox(
		    `HWeight( 1, `MenuButton( _( "&Add" ),
					      [
					       `item(`id(`ftp), 	_( "&FTP..." 		) ),
					       `item(`id(`http), 	_( "&HTTP..." 		) ),
					       `item(`id(`samba), 	_( "&Samba..." 		) ),
					       `item(`id(`nfs), 	_( "&NFS..." 		) ),
					       `item(`id(`cd), 		_( "&CD..." 		) ),
					       `item(`id(`dvd), 	_( "&DVD..." 		) ),
					       `item(`id(`local_dir), 	_( "&Local directory..."  ) )
					       ]
					      )
			      ),
//		    `HWeight( 1, `PushButton( `id(`edit), editButtonLabel ) ),
		    `HWeight( 1, `PushButton( `id(`delete), deleteButtonLabel ) ),
		    `HStretch(),
		    `HWeight( 1, `PushButton( `id(`up), upButtonLabel ) ),
		    `HWeight( 1, `PushButton( `id(`down), downButtonLabel ) ),
		    `HStretch(),
		    `PushButton(`id(`enable), enableButtonLabel )
		    ),
	      `VSpacing( 0.5 )
	      );


    string title = _("Software Source Media");

    if ( false ) {
        term contents = `VBox(
          `HBox(
                `HWeight( 10, `HStretch() ),
                `HWeight( 50,
              `Frame( _("Select location of source"),
                `RadioButtonGroup(`id(`network),`opt(`notify),
                      `VBox(
                      `VSpacing(0.3),
                      cd_box,
                      `VSpacing(0.8),
                      `HBox(
                            `Left(`RadioButton(`id(`nfs),
                             `opt(`notify),
                             // Radio button for installation from network
                             _("Net&work"),
                             true)),
                            samba_box,
                            ftp_box, http_box
                            ),
                      `HBox(`HWeight(1, `Empty()),
                            `HWeight(10, `VBox(
                             `TextEntry(`id(`server),
                                  // Input field label for IP of server
                                  // to install from for network installation
                                  _("&IP address or name of server:"),
                                  InstMedia::net_server ),
                             `TextEntry(`id(`dir),
                                  // Input field label for (remote) directory
                                  // for network installation
                                  _("Directory on the ser&ver:"),
                                  InstMedia::net_dir ),
                             `VSpacing(0.3))
                               )
                            ),
                      `VSpacing(0.8),
                      `Left(`RadioButton(`id(`partition),`opt(`notify),
                             // Radio button for installation from local hard disk
                             _("&Hard disk") ,
                             (InstMedia::mediatype == 3))
                            ),
                      `HBox(`HWeight(1, `Empty()),
                            `HWeight(10,`TextEntry(`id(`partdir),
                                 // Input field label for local directory
                                 _("&Directory:"),
                                 ((InstMedia::mediatype == 3)?InstMedia::boot_src:"")))
                            ),
                      `VSpacing(0.8)
                      )

                      )
                )
              ),
                `HWeight( 10, `HStretch() )
                ),
          `VSpacing(0.2)
            );
    }

    // help
    string help_text = _("<p>
Software packages can be installed from the CD, over a
network, or from the hard disk.
</p>
");

    // help, continued
    help_text = help_text + _("<p>
To install packages from <b>CD</b>,
have the SuSE CD set or the DVD available.
</p>
");

    // help, continued
    help_text = help_text + _("<p>
The SuSE CDs can be copied to the <b>hard disk</b>.
Then use that as the installation source.
Insert the path name where the first
CD is located, for example, /usr/SuSE/<b>CD1</b>.
Only the base path is required if all CDs are copied
into one directory.
</p>
");

    // help, continued
    help_text = help_text + _("<p>
<b>Network</b> installation requires a working network connection.
Configure YaST2's \"Network/Base\" module first,
if required.  Specify the directory where the packages from
the first CD are located, such as, /usr/SuSE/<b>CD1</b>.
Only the base path is
required if packages are not divided, for example, /usr/full-i386.
The directory must be listed in the file <i>/etc/exports</i>
on the NFS server.
</p>
");

    Wizard::CreateDialog();
    Wizard::ReplaceNextButton (`PushButton(`id(`next), FinishButtonLabel()));
    Wizard::SetContents(title, contents, help_text, true, true);

    Pkg::SourceStartManager( false );
    Pkg::SourceStartCache ( false );

    fillTable();

    any input = nil;

    integer current = -1;
    
    string url = "";
    
    repeat
    {
        if ( current >= 0 ) {
            UI::ChangeWidget( `id( `table ), `CurrentItem, current );
        }

	input = Wizard::UserInput();
	y2debug( "Input: %1", input );

	if ( input == `ftp || input == `http || input == `samba )
	{
	    url = getServerUrl( input );
            createSource( url );
        }
        else if ( input == `nfs )
        {
            url = getNfsUrl();
            createSource( url );
        }
        else if ( input == `cd || input == `dvd )
        {
            url = getCdUrl();
            createSource( url );
        }
	else if ( input == `local_dir )
	{
	    url = getDirectoryUrl( "" );
            createSource( url );
	}
        else
        {
            current = UI::QueryWidget( `id( `table ), `CurrentItem );
            
            term idterm = select( UI::QueryWidget( `id( `table ), `Item( current ) ), 0, 0 );
            integer id = select( idterm, 0, 0 );
            
            if ( input == `edit )
            {
                symbol type = SCR::Read( .instsrcmgr.source.type, id );
                y2debug( "Edit type %1", type );
                if ( type == `ftp || type == `http || type == `samba )
                {
                    editServer( type, id );
                    fillTable();
                }
                else if ( type == `local )
                {
                    editDirectory( id );
                    fillTable();
                }
                else if ( type == `nfs )
                {
                    editNfs( id );
                    fillTable();
                }
            }
            else if ( input == `delete )
            {
                if ( UI::YesNoPopup( _("Delete selected installation source from list?") ) )
                {
                    if ( !Pkg::SourceDelete( id ) )
                    {
                        UI::ErrorPopup( _("Error deleting source.") );
                    }
                    else
                    { 
                        fillTable();
                    }
                }
            }
            else if ( input == `enable )
            {
                map generalData = Pkg::SourceGeneralData( id );
                boolean state = lookup( generalData, "enabled", true );
                state = !state;
                string newstate = ( state ? _("On") : _("Off") );
                UI::ChangeWidget( `id( `table ), `Item( current, 0 ), newstate );
                Pkg::SourceSetEnabled( id, state );
            }
            else if ( input == `up )
            {
                if ( current > 0 ) {
                    Pkg::SourceRaisePriority( id );
                    current = current - 1;
                }
                fillTable();
            }
            else if ( input == `down )
            {
                if ( current < numSources - 1 ) {
                    Pkg::SourceLowerPriority( id );
                    current = current + 1;
                }
                fillTable();
            }
        }
    
    } until ( input == `abort || input == `next || input == `back );

    UI::CloseDialog();

    Pkg::SourceSaveRanks();

    y2debug( "Return: %1", input );

    return input;

    // Disabled obsolete code. It's still in to conserve translations.
    if ( false ) {
        // change label of buttons (only normal mode)
        if ( Mode::normal
	     && !use_you )
        {
	    Wizard::ReplaceAbortButton (`PushButton(`id(`abort), _("&Save and Exit")));
	    Wizard::ReplaceBackButton  (`PushButton(`id(`back), AbortButtonLabel()));
	    // let the Next Button active
	    // Wizard::ReplaceNextButton (`PushButton(`id(`next), InstallButtonLabel()));
        }

        y2debug( "MEDIATYPE: %1", InstMedia::mediatype );

        if ( InstMedia::mediatype <= 1 )			// CD, DVD
        {
	    if ( use_you )
	    {
	        UI::ChangeWidget(`id(`ftp), `Value, false);
	        UI::ChangeWidget(`id(`http), `Value, false);
	    }
	    UI(``{
	        ChangeWidget(`id(`cd), `Value, true);
	        ChangeWidget(`id(`nfs), `Value, false);
	        ChangeWidget(`id(`partition), `Value, false);
	        ChangeWidget(`id(`server), `Enabled, false);
	        ChangeWidget(`id(`dir), `Enabled, false);
	        ChangeWidget(`id(`partdir), `Enabled, false);
	    });
        }
        else if (InstMedia::mediatype == 2)	// NFS
        {
	    if ( use_you )
	    {
	        UI::ChangeWidget(`id(`ftp), `Value, false);
	        UI::ChangeWidget(`id(`http), `Value, false);
	    }
	    UI(``{
	        ChangeWidget(`id(`cd), `Value, false);
	        ChangeWidget(`id(`nfs), `Value, true);
	        ChangeWidget(`id(`partition), `Value, false);
	        ChangeWidget(`id(`server), `Enabled, true);
	        ChangeWidget(`id(`dir), `Enabled, true);
	        ChangeWidget(`id(`partdir), `Enabled, false);
	    });
        }
        else if ( InstMedia::mediatype == 4 && use_you )	// FTP
        {
	    UI(``{
	        ChangeWidget(`id(`ftp), `Value, true);
	        ChangeWidget(`id(`http), `Value, false);
	        ChangeWidget(`id(`cd), `Value, false);
	        ChangeWidget(`id(`nfs), `Value, false);
	        ChangeWidget(`id(`partition), `Value, false);
	        ChangeWidget(`id(`server), `Enabled, true);
	        ChangeWidget(`id(`dir), `Enabled, true);
	        ChangeWidget(`id(`partdir), `Enabled, false);
	    });
        }
        else if ( InstMedia::mediatype == 6 && use_you )	// HTTP
        {
	    UI(``{
	        ChangeWidget(`id(`ftp), `Value, false);
	        ChangeWidget(`id(`http), `Value, true);
	        ChangeWidget(`id(`cd), `Value, false);
	        ChangeWidget(`id(`nfs), `Value, false);
	        ChangeWidget(`id(`partition), `Value, false);
	        ChangeWidget(`id(`server), `Enabled, true);
	        ChangeWidget(`id(`dir), `Enabled, true);
	        ChangeWidget(`id(`partdir), `Enabled, false);
	    });
        }
        else if ( InstMedia::mediatype == 5 )		// Samba
        {
	    UI(``{
	        ChangeWidget(`id(`cd), `Value, false);
	        ChangeWidget(`id(`nfs), `Value, false);
	        ChangeWidget(`id(`smb), `Value, true);
	        ChangeWidget(`id(`partition), `Value, false);
	        ChangeWidget(`id(`server), `Enabled, true);
	        ChangeWidget(`id(`dir), `Enabled, true);
	        ChangeWidget(`id(`partdir), `Enabled, false);
	    });
        }
        else if ( InstMedia::mediatype == 3 )		// Harddisk
        {
	    if ( use_you )
	    {
	        UI::ChangeWidget(`id(`ftp), `Value, false);
	        UI::ChangeWidget(`id(`http), `Value, false);
	    }
	    UI(``{
	        ChangeWidget(`id(`cd), `Value, false);
	        ChangeWidget(`id(`nfs), `Value, false);
	        ChangeWidget(`id(`partition), `Value, true);
	        ChangeWidget(`id(`server), `Enabled, false);
	        ChangeWidget(`id(`dir), `Enabled, false);
	        ChangeWidget(`id(`partdir), `Enabled, true);
	    });
        }

        UI::ChangeWidget(`id(`server), `Value, InstMedia::net_server);
        UI::ChangeWidget(`id(`dir), `Value, InstMedia::net_dir);

        boolean mount_ok = false;

        repeat
        {
	    if ( UI::QueryWidget(`id(`cd), `Value) )
	    {
	        InstMedia::mediatype = 0;
	        if ( use_you )
	        {
		    UI::ChangeWidget(`id(`ftp), `Value, false);
		    UI::ChangeWidget(`id(`http), `Value, false);
	        }

	        UI(``{
		    ChangeWidget(`id(`nfs), `Value, false);
		    ChangeWidget(`id(`partition), `Value, false);
		    ChangeWidget(`id(`server), `Enabled, false);
		    ChangeWidget(`id(`dir), `Enabled, false);
		    ChangeWidget(`id(`partdir), `Enabled, false);
	        });
	    }

            if ( UI::QueryWidget(`id(`nfs), `Value) )
	    {
	        InstMedia::mediatype = 2;
	        if ( use_you )
	        {
		    UI::ChangeWidget(`id(`ftp), `Value, false);
		    UI::ChangeWidget(`id(`http), `Value, false);
	        }
	        UI(``{
		    ChangeWidget(`id(`cd), `Value, false);
		    ChangeWidget(`id(`partition), `Value, false);
		    ChangeWidget(`id(`server), `Enabled, true);
		    ChangeWidget(`id(`dir), `Enabled, true);
		    ChangeWidget(`id(`partdir), `Enabled, false);
	        });
	    }

	    if ( !use_you && UI::QueryWidget(`id(`smb), `Value) )
	    {
	        InstMedia::mediatype = 5;
	        UI(``{
		    ChangeWidget(`id(`cd), `Value, false);
		    ChangeWidget(`id(`partition), `Value, false);
		    ChangeWidget(`id(`server), `Enabled, true);
		    ChangeWidget(`id(`dir), `Enabled, true);
		    ChangeWidget(`id(`partdir), `Enabled, false);
	        });
	    }

	    if ( UI::QueryWidget(`id(`partition), `Value) )
	    {
	        InstMedia::mediatype = 3;
	        if ( use_you )
	        {
		    UI::ChangeWidget(`id(`ftp), `Value, false);
		    UI::ChangeWidget(`id(`http), `Value, false);
	        }
	        UI(``{
		    ChangeWidget(`id(`cd), `Value, false);
		    ChangeWidget(`id(`nfs), `Value, false);
		    ChangeWidget(`id(`server), `Enabled, false);
		    ChangeWidget(`id(`dir), `Enabled, false);
		    ChangeWidget(`id(`partdir), `Enabled, true);
	        });
	    }

	    if ( use_you && UI::QueryWidget(`id(`ftp), `Value) )
	    {
	        InstMedia::mediatype = 4;
	        UI(``{
		    ChangeWidget(`id(`http), `Value, false);
		    ChangeWidget(`id(`cd), `Value, false);
		    ChangeWidget(`id(`nfs), `Value, false);
		    ChangeWidget(`id(`partition), `Value, false);
		    ChangeWidget(`id(`server), `Enabled, true);
		    ChangeWidget(`id(`dir), `Enabled, true);
		    ChangeWidget(`id(`partdir), `Enabled, false);
	        });
	    }

	    if ( use_you && UI::QueryWidget(`id(`http), `Value) )
	    {
	        InstMedia::mediatype = 6;
	        UI(``{
		    ChangeWidget(`id(`ftp), `Value, false);
		    ChangeWidget(`id(`cd), `Value, false);
		    ChangeWidget(`id(`nfs), `Value, false);
		    ChangeWidget(`id(`partition), `Value, false);
		    ChangeWidget(`id(`server), `Enabled, true);
		    ChangeWidget(`id(`dir), `Enabled, true);
		    ChangeWidget(`id(`partdir), `Enabled, false);
	        });
	    }

	    ret = UI::UserInput();

	    InstMedia::net_server = UI::QueryWidget(`id(`server), `Value);
	    InstMedia::net_dir    = UI::QueryWidget(`id(`dir), `Value);
	    InstMedia::boot_src   = UI::QueryWidget(`id(`partdir), `Value);

	    if ( ret == `abort )
	    {
	        if ( Mode::normal )
	        {
		    if ( !use_you )
		    {
		        string message = _("Do you want to save the settings\nand exit the dialog?");
		        any ret = UI::YesNoPopup( message);

		        if (ret)
		        {
			    mount_ok = true;
			    if ( InstMedia::mediatype > 1 && InstMedia::mediatype != 5 ) // not  CD, DVD, Samba
			    {
			        // Check not for CD
			        mount_ok = CheckMount (InstMedia::mediatype);
			    }

			    if ( mount_ok )
			    {
			        if ( !Mode::test )
			        {
				    InstMedia::WriteInstallMap();
			        }
			        // Umount before exiting
			        InstMedia::UnmountMedium();
			        return `abort;
			    }
			    else
			    {
			        ret = `again;
			    }
		        } // save == yes
		    }
		    else	// !use_you
		    {
		        return `abort;
		    }
	        }  // normal_mode
	        else
	        {
		    if ( WFM::CallFunction(`inst_confirm_abort(`painless) ) )
		        return `abort;
	        }
	    } // ret == `abort

	    if (ret == `cancel ) break;

	    if ( use_you && ret == `next )
	    {
	        // return to the frame before ( only you )
	        ret = `back;
	    }

	    if ( ret == `back )
	    {
	        if ( use_you )
	        {
		    // set info for online update, if going `next or `back
		    // (`next is changed to `back in case of online update -> see above)
		    SetOnlineUpdateInfo( InstMedia::mediatype );
	        }

	        break;
	    } // ret == `back


	    if ( ret == `next )
	    {
	        boolean go_on = true;

	        if ( InstMedia::mediatype == 5 )		// Samba
	        {
		    symbol r = SambaPopup();

		    if ( r == `cancel )
		    {
		        go_on = false;
		        ret = `again;
		    }
	        }

	        if ( go_on )
	        {
		    mount_ok = CheckMount( InstMedia::mediatype);

		    if ( mount_ok )
		    {
		        if ( !Mode::test )
		        {
			    InstMedia::WriteInstallMap();
		        }
		        UI::ChangeWidget(`id(`abort), `Label, CancelButtonLabel() );
		        UI::ChangeWidget(`id(`back),  `Label, BackButtonLabel()   );
		        UI::ChangeWidget(`id(`next),  `Label, NextButtonLabel()   );
		    }
		    else
		    {
		        ret = `again;
		    }
	        }
	    } // ret == `next

        } until ( ret == `next );
    }

    y2debug("INST_SOURCE *** return: %1", ret );

    return ret;
}
