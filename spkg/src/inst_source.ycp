/**
 * Module: 		inst_source.ycp
 *
 * Author:		Cornelius Schumacher <cschum@suse.de>
 *
 * Purpose:
 * Adding, removing and prioritizing of installation sources for packagemanager.
 *
 * $Id$
 */

{
    textdomain "packager";

    import "Mode";
    import "Installation";

    import "Wizard";

    include "ui/common_messages.ycp";
    include "ui/common_functions.ycp";
    include "ui/common_popups.ycp";
    include "ui/file_popups.ycp";

    include "inst_source_dialogs.ycp";

    any 	ret = nil;

    integer numSources = 0;

    /**
        Create a table item from a map as returned by the InstSrcManager agent.
        @param source The map describing the source as returned form the agent.
        @return An item suitable for addition to a Table.
    */
    global define term createItem( integer source ) ``{
        map generalData = Pkg::SourceGeneralData( source );
        map productData = Pkg::SourceProductData( source );
        term item = `item(
            `id( source ),
	    // corresponds to the "Enable/Disable" button
            lookup( generalData, "enabled", true ) ? _("On") : _("Off"),
            lookup( productData, "label", "unknown" ),
            lookup( generalData, "url", "" )
        );
        return item;
    }

    /**
        Fill sources table with entries from the InstSrcManager agent.
    */
    global define void fillTable() ``{
        list(integer) sources = Pkg::SourceGetCurrent ( false );

        list items = [];

        numSources = size( sources );

        integer i = 0;
        while ( i < numSources ) {
            items = add( items, createItem( select( sources, i, nil ) ) );
            i = i + 1;
        }

        UI::ChangeWidget( `id( `table ), `Items, items );
    }

    define void createSource( string url ) ``{
        if ( url != "" )
        {
//            UI::MessagePopup( sformat( "URL: %1", url ) );
            UI::OpenDialog(
              `VBox(
                `VSpacing( 0.2 ),
                `Label( _("Adding installation source...") ),
                `VSpacing( 0.2 )
               )
            );
            integer id = Pkg::SourceCreate( url );
            UI::CloseDialog();
            if ( id == nil )
            {
                string _msg1 = sformat( _("Unable to create installation source
from URL '%1'."), url );
                string err = Pkg::ErrorId();
                string _msg2 = "";
                if ( err != "ok" ) {
                    if ( err == "instsrc_duplicate" )
                        _msg2 = _("A source for this product already exists.");
                    else
                        _msg2 = _("Details:") + "\n" + Pkg::Error();
                }
                UI::ErrorPopup( _msg1 + "\n" + _msg2 );
            }
            else
            {
                fillTable();
            }
        }
    }

    list items = [];

    string editButtonLabel = _("&Edit...");
    string deleteButtonLabel = _("&Delete");
    string upButtonLabel = _("&Up");
    string downButtonLabel = _("D&own");
    string enableButtonLabel = _("Enab&le or Disable");

    term contents =
	`VBox(
	      `HBox(
		    `Table( `id( `table ), `opt( `keepSorting ),
			   `header(
				   _("Status"),
				   _("Name"),
				   _("URL")
				   ),
			   items
			   ),
		    `HSpacing()
		    ),
	      `HBox(
		    `HWeight( 1, `MenuButton( _("&Add"),
					      [
					       `item(`id(`ftp), 	_("&FTP...") ),
					       `item(`id(`http), 	_("&HTTP...") ),
					       `item(`id(`samba), 	_("&Samba...") ),
					       `item(`id(`nfs), 	_("&NFS...") ),
					       `item(`id(`cd), 		_("&CD...") ),
					       `item(`id(`dvd), 	_("&DVD...") ),
					       `item(`id(`local_dir), 	_("&Local Directory...") )
					       ]
					      )
			      ),
//		    `HWeight( 1, `PushButton( `id(`edit), editButtonLabel ) ),
		    `HWeight( 1, `PushButton( `id(`delete), deleteButtonLabel ) ),
		    `HStretch(),
		    `HWeight( 1, `PushButton( `id(`up), upButtonLabel ) ),
		    `HWeight( 1, `PushButton( `id(`down), downButtonLabel ) )
              ),
              `HBox(
		    `HStretch(),
		    `PushButton(`id(`enable), enableButtonLabel )
		    ),
	      `VSpacing( 0.5 )
	      );


    string title = _("Software Source Media");

    // help
    string help_text = _("<p>
Software packages can be installed from the CD, over a
network, or from the hard disk.
</p>
");

    // help, continued
    help_text = help_text + _("<p>
To install packages from <b>CD</b>,
have the SuSE CD set or the DVD available.
</p>
");

    // help, continued
    help_text = help_text + _("<p>
The SuSE CDs can be copied to the <b>hard disk</b>.
Then use that as the installation source.
Insert the path name where the first
CD is located, for example, /usr/SuSE/<b>CD1</b>.
Only the base path is required if all CDs are copied
into one directory.
</p>
");

    // help, continued
    help_text = help_text + _("<p>
<b>Network</b> installation requires a working network connection.
Configure YaST2's \"Network/Base\" module first,
if required.  Specify the directory where the packages from
the first CD are located, such as /usr/SuSE/<b>CD1</b>.
Only the base path is
required if packages are not divided, for example, /usr/full-i386.
The directory must be listed in the file <i>/etc/exports</i>
on the NFS server.
</p>
");

    Wizard::CreateDialog();
    Wizard::ReplaceNextButton (`PushButton(`id(`next), CloseButtonLabel()));
    Wizard::SetContents(title, contents, help_text, false, true);
    Wizard::ReplaceAbortButton( `Empty() );
    Wizard::ReplaceBackButton( `Empty() );

    Pkg::SourceStartManager( false );
    Pkg::SourceStartCache ( false );

    fillTable();

    any input = nil;

    integer current = -1;

    string url = "";

    repeat
    {
        if ( current >= 0 ) {
            UI::ChangeWidget( `id( `table ), `CurrentItem, current );
        }

	input = Wizard::UserInput();
	y2debug( "Input: %1", input );

	if ( input == `ftp || input == `http || input == `samba )
	{
	    url = getServerUrl( input );
            createSource( url );
        }
        else if ( input == `nfs )
        {
            url = getNfsUrl();
            createSource( url );
        }
        else if ( input == `cd )
        {
            createSource( "cd:///" );
        }
        else if ( input == `dvd )
        {
            createSource( "dvd:///" );
        }
	else if ( input == `local_dir )
	{
	    url = getDirectoryUrl( "" );
            createSource( url );
	}
        else
        {
            current = UI::QueryWidget( `id( `table ), `CurrentItem );

            term idterm = select( UI::QueryWidget( `id( `table ), `Item( current ) ), 0, 0 );
            integer id = select( idterm, 0, 0 );

            if ( input == `edit )
            {
                symbol type = SCR::Read( .instsrcmgr.source.type, id );
                y2debug( "Edit type %1", type );
                if ( type == `ftp || type == `http || type == `samba )
                {
                    editServer( type, id );
                    fillTable();
                }
                else if ( type == `local )
                {
                    editDirectory( id );
                    fillTable();
                }
                else if ( type == `nfs )
                {
                    editNfs( id );
                    fillTable();
                }
            }
            else if ( input == `delete )
            {
                if ( UI::YesNoPopup( _("Delete selected installation source from list?") ) )
                {
                    if ( !Pkg::SourceDelete( id ) )
                    {
                        UI::ErrorPopup( _("Error deleting source.") );
                    }
                    else
                    {
                        fillTable();
                    }
                }
            }
            else if ( input == `enable )
            {
                map generalData = Pkg::SourceGeneralData( id );
                boolean state = lookup( generalData, "enabled", true );
                state = !state;
		// corresponds to the "Enable/Disable" button
                string newstate = ( state ? _("On") : _("Off") );
                UI::ChangeWidget( `id( `table ), `Item( current, 0 ), newstate );
                Pkg::SourceSetEnabled( id, state );
            }
            else if ( input == `up )
            {
                if ( current > 0 ) {
                    Pkg::SourceRaisePriority( id );
                    current = current - 1;
                }
                fillTable();
            }
            else if ( input == `down )
            {
                if ( current < numSources - 1 ) {
                    Pkg::SourceLowerPriority( id );
                    current = current + 1;
                }
                fillTable();
            }
        }

    } until ( input == `abort || input == `next || input == `back );

    UI::CloseDialog();

    Pkg::SourceSaveRanks();

    y2debug( "Return: %1", input );

    return input;
}
