/**
 * Module: 		sw_single.ycp
 *
 * Authors: 		Gabriele Strattner (gs@suse.de)
 *
 * Purpose: 		contains dialog loop for workflows:
 *	"Install/Remove software" 	called with argument "beginner", i.e. skip inst_source if possible
 *	"Choose source of installation" without argument 	-> workflow starts with inst_source
 *
 * String corrections by Christian Steinruecken <cstein@suse.de>, 2001/08/01
 *
 *
 * $Id$
 */

{
    textdomain "sw_single";

    import "Arch";
    import "Installation";
    import "InstMedia";
    import "MediaUI";
    import "PackageIO";

    include "ui/wizard_dialog.ycp";
    include "ui/common_popups.ycp";
    include "ui/common_functions.ycp";

    // =============================================================

    // check test_popup
    // test_mode is checked for in Installation constructor

    global define CheckArguments () ``{

	integer arg_n = size (Args()) - 1;

	boolean test_popup = false;
	list arg_list = [];

	while (arg_n >= 0)
	{
	    if (Args(arg_n) == .test)
	    {
		Installation::test_mode = true;
	    }
	    else if (Args(arg_n) == .testp)
	    {
		Installation::test_mode = true;	// .testp implies .test
		test_popup = true;
	    }
	    else if (is (Args(arg_n), string))
	    {
		arg_list = add (arg_list, Args(arg_n));
	    }
	    else if (is (Args(arg_n), list))
	    {
		foreach (`arg, Args(arg_n), ``{ arg_list = add (arg_list, arg);});
	    }
	    arg_n = arg_n - 1;
	}

	y2debug("Testmode %1, Testpopup %2", Installation::test_mode, test_popup );
	y2milestone("ARGLIST %1", arg_list);

	return arg_list;

   };  // CheckArguments

   //
   // CheckWhichPackages
   //
   // check arg_list if we're called with an absolute package path
   // if yes, we just install this package and dont need installation media
   //
   // returns	`done		all done
   //		`failed		package not found
   //		`next
   //		`found_medium	found CD1
   //		`found_descr	found local package descr
   //		`unknown_descr	found nothing
   //

   define CheckWhichPackages (list arg_list) ``{

	if (size (arg_list) <= 0)
	{
	    return `next;
	}

	// if sw_single is called with argument "beginner" or with a package list or package name
	// -> skip inst_source (if possible)

	string postfix =  substring (select (arg_list, 0), size (select (arg_list, 0)) - 4 );
	y2milestone("SW_SINGLE: POSTFIX: %1", postfix );

	// if sw_single is called with an absolute package-pathname, there is no need to
	// mount the source medium or check SuSE version or depemdendies

	if ( postfix == ".rpm" )		// package name given
	{
	    // does packge exist ?
	    if ( SCR::Read(.target.size, select (arg_list, 0)) > 0 )
	    {
		InstMedia::bootmode = "Harddisk";
		InstMedia::mediatype = 3;

		CallFunction( `inst_rpmcopy( false, false, select(arg_list, 0) ));

		// package is installed without paying attention to SuSE dependencies
		// don't call SuSEConfig -> dialog loop ends
		return `done;
	    }
	    else
	    {
		string message = sformat (_("Package %1 was not found on the medium."), select(arg_list, 0) );
		UI::MessagePopup(message);
		return `failed;
	    }
	}
	else		// no package given, try to mount source medium
	{
	    y2milestone ("beginner");

	    // initialize InstMedia from running system

	    InstMedia::initializeInstMedia ($[]);

	    // is CD1 inserted / available ?

	    if (InstMedia::MountMedium ( 1 ) == 0)
		return `found_medium;

	    // try to get local information (common.pkd, du.dir, ...)
	    local_descr = PackageIO::CheckLocalDescription();
	    if ( local_descr )
		return `found_descr;

	}  // no package given

	return `unknown_descr;

    };	// CheckWhichPackages

    // =============================================================

    string msg_beginner = "";
    string msg_expert = "";

    string msg_str11 =   _("<p>Launch this module to install additional packages or
remove installed ones.
To install commercial software, launch this module and select
'pay' from list of package sets.
</p>
");

    string msg_str12 = _("<p>Please insert <b>CD 1</b> for CD installation.</p>");

    string msg_str13 = _("<p>Launch this module if you want to choose the
source of installation. It is possible to install packages from CD,
via network or from a hard drive.</p>
<p>You can specify the source medium and install
packages with this module.
</p>

");

    string msg_str21 = _("<P>You need to be logged in as <i>root</i> in order to
do this.</P>");

    msg_beginner = msg_str11 + msg_str12 + msg_str21;
    msg_expert = msg_str13 + msg_str21;

    string wrong_media_msg = _("Please make sure the installation medium is correct.");

    string language = UI::GetLanguage(true);

    UI::CreateWizardDialog();

    map user_settings = $[];

    list arg_list = CheckArguments();

    //
    // Get informations for initialisation of PKGINFO server
    //

    list part_input = [];

    // percentage of spare space
    part_input = PackageIO::EvaluateFreeSpace( Installation::destdir, 5 );

    y2debug( "SW_SINGLE: partition input: %1", part_input );

    /*
     * main dialog loop
     */

    list dialog = [
		 `inst_source( true, true ),		// 0: ask installation source
		 `inst_sw_single( ),			// 1: ask packages
		 `inst_rpmcopy( false, false ),		// 2: install packages
		 `inst_suseconfig( false, false )	// 3: SuSEconfig
    ];

    integer dialog_id = 0;
    any result = `next;

    // assume package information already on destination

    string descrPath = Installation::descrdestdir + "/suse";
    string infopath  = descrPath + "/setup/descr";
    string dudir     = descrPath + "/setup/du/du.dir";
    string rootpath  = Installation::destdir;

    // flag, if package info was found on destination
    boolean local_descr = true;

    boolean skip_source = false;

    symbol descr_result = `next;

    descr_result = CheckWhichPackages (arg_list);
    y2milestone ("sw_single.ycp descr_result %1", descr_result);

    if ((descr_result == `done)
	|| (descr_result == `failed))
    {
	dialog_id = -1;				// done
    }
    else if ( descr_result == `next )
    {
	dialog_id = 0;
    }
    else if ( descr_result == `found_medium )	// found CD1
    {
	descrPath = InstMedia::GetInstPath();
	infopath = descrPath + "/setup/descr";
	dudir    = descrPath + "/setup/du/du.dir";
	if (MediaUI::ChangeMedium(1, false))	// check release data
	{
	    dialog_id = 1;				// dont ask for source
	}
	else
	{
	    dialog_id = 0;
	}
    }
    else if ( descr_result == `found_descr )	// found local descr
    {
	descrPath = Installation::descrdestdir + "/suse";
	infopath = descrPath + "/setup/descr";
	dudir    = descrPath + "/setup/du/du.dir";
	dialog_id = 1;				// dont ask for source
    }
    else if ( descr_result == `unknown_descr )	// found NO descr
    {
	if (MediaUI::ChangeMedium(1, true))	// check release data
	{
	    dialog_id = 1;			// dont ask for source
	}
	else
	{
	    dialog_id = 0;
	}
    }

    if ( Installation::test_mode )
    {
	infopath = "../../y2m_inst/ycp/packages/testsuite/suse/setup/descr";
	dudir  = "../../y2m_inst/ycp/packages/testsuite/suse/setup/du/du.dir";
    }

    if (dialog_id == 1)		// found something
    {
	InstMedia::gatherReleaseData ();	// get installed product info

	if (InstMedia::release_no == 0)		// no installed info found
	{
	    UI::MessagePopup (_("No product/version information available on system."));
	}
    }

    y2milestone("SW_SINGLE infopath: %1", infopath );

    if ( !Installation::test_mode )
    {
	// removing old logging
	SCR::Execute (.target.bash, "/bin/rm -f /var/log/y2logRPM*");
    }

    while ((dialog_id >= 0) && (dialog_id < size (dialog)))
    {
	if ( dialog_id == 1 )
	{
	    any retval = nil;

	    boolean version_ok = false;

	    UI::OpenDialog(`opt(`decorated ),`Label(_("Reading package information; One moment please...")));

	    map pkginitmap = $["common.pkd":"common.pkd",
				"dudir":dudir,
				"language":language,
				"packageinfopath":infopath,
				"partition":part_input,
				"rootpath":Installation::destdir,
				"yastpath":Installation::yastdir,
				"update":true,
				"memoptimized":true,
				"forceInit":true];		// force initialisation

	    retval = PKGINFO (`setEnvironment(pkginitmap));
	    y2debug( "Return  PKGINFO(%1) %2", pkginitmap, retval);

	    UI::CloseDialog();

	    map version_map = $[];

	    if ( !Installation::test_mode )
	    {
		version_map = PKGINFO (`compareSuSEVersions() );
	    }
	    else if ( test_popup )
	    {
		// test the popup
		version_map = $[ "installedGreater":true ];
		change ( version_map, "installedVersion", "7.3" );
		change ( version_map, "updateVersion","7.2" );
	    }

	    if ( lookup( version_map, "installedGreater", false ) )
	    {
		// This popup informs the user that he is installing from an older version
		string msg1 = _("The SuSE distribution version on the source medium
must NOT be older than the version of your installed system.\n");

		string versions = sformat( _("Installed version: %1\n"),
			lookup( version_map, "installedVersion","" ))
			+ sformat( _("Version on source medium: %1\n\n"),
			lookup( version_map, "updateVersion","" ));
		y2debug( "SW_SINGLE: %1", versions );

		UI::MessagePopup(msg1 + versions + wrong_media_msg);

		// continue with inst_source
		dialog_id = 0;
		continue;

	    }  // wrong version

	    // There could be a list of packages (defined in an ascii-file) or a package name (without .rpm)

	    if ( size(arg_list) > 0 && select(arg_list, 0) != "beginner" )
	    {
		string arg_name = select(arg_list,0);
		map inputMap = $[];

		if ( SCR::Read(.target.size, arg_name) <= 0 )
		{
		    list installList = arg_list;
		    inputMap = add (inputMap, "install", installList);
	        }
		else
	 	{
		    y2milestone("Reading file %1", arg_name );
		    inputMap = SCR::Read( .target.ycp, arg_name);
		}
	        y2milestone("inputMap: %1", inputMap );

		if ( inputMap == nil || size ( inputMap ) == 0 )
		{
		    string message = _("Error while reading configuration-file.");
		    UI::MessagePopup(message);
		    return `cancel;
	        }
		else
		{
		    list installList = lookup ( inputMap, "install", [] );
		    list deleteList = lookup ( inputMap, "delete", [] );
		    boolean userInput = lookup ( inputMap, "userInput", false );

		    y2milestone("SW_SINGLE installList: %1", installList );
		    y2milestone("SW_SINGLE deleteList: %1", deleteList );
		    y2milestone("SW_SINGLE userInput: %1", userInput );

		    foreach( `package, installList,
		    ``{
			any r = PKGINFO( `selectInstall( package ));
			y2debug( "PKGINFO selectInstall: %1", package );
		    });

		    foreach( `package, deleteList,
		    ``{
			any r = PKGINFO( `selectDelete( package ) );
			y2debug( "PKGINFO selectDelete: %1", package );
		    });

		    // Checking dependecies
		    map pac_depends = PKGINFO(`getDependencies());

		    list or_depends = lookup( pac_depends, "REQUIRE", [] );
		    y2debug( "REQUIRE Dependencies: %1", or_depends );
		    list xor_depends = lookup( pac_depends, "CONFLICT", [] );
		    y2debug( "CONFLICT Dependencies: %1", xor_depends );
		    list and_depends = lookup( pac_depends, "ADD", [] );
		    y2debug( "ADD Dependencies: %1", and_depends );

		    if ( userInput == true )
		    {
			result = CallFunction( `inst_sw_single( `post_install,
							      `not_only_checked,
							      part_input ) );
		    }
		    else
		    {
			if (or_depends != []
			    || xor_depends != []
			    || and_depends !=[] )
			{
			    // There is an unresolved dependency -> call
			    // single-package-selection to solve it.
			    result = CallFunction( `inst_sw_single( `post_install,
								  `only_check,
								  part_input) );
			}
			else
			{
			    // install anyway
			    result = `ok;
			}
		    }
		}
	    }
	    else
	    {
		// Calling inst_sw_single
		result = CallFunction( `inst_sw_single( `post_install,
						      `not_only_checked,
						      part_input ) );
	    }
	}
	else
	{
	    result = CallFunction( select(dialog, dialog_id) );
	}
        y2debug( "RESULT %1: %2", select(dialog, dialog_id), result );

	if (result == `cancel || result == `abort)
        {
	    // dialog loop ends
	    dialog_id = -1;
        }
        else if (result == `auto)
        {
	    // inst_suseconfig returns `auto -> last module, dialog loop ends
	    dialog_id = dialog_id + 1;
	}
	else if (result == `next )
	{
	    dialog_id = dialog_id + 1;
	}
	else if (result == `ok )	// inst_sw_single returns `ok
	{
	    // setting user_setting.install_list for packages which have to be installed

	    list install_list =  PKGINFO ( `getInstallSet() );
	    y2debug( "SW_SINGLE: Writing install_list: %1", install_list );
	    change ( user_settings , "install_list", install_list );

	    list delete_list =  PKGINFO ( `getDeleteSet() );
	    // y2debug( "Writing delete_list: %1", delete_list );
	    change ( user_settings , "delete_list", delete_list );

	    y2debug( "SW_SINGLE: Usersettings: %1", user_settings );

	    if ( install_list != [] || delete_list != [] )
	    {
		dialog_id = dialog_id + 1;
	    }
	    else
	    {
	        y2debug( "Nothing selected" );
	        // dialog loop ends
		dialog_id = -1;
	    }
	}
	else if (result == `back)
	{
	    dialog_id = dialog_id - 1;
	}
	else if (result == `cancel_single)
	{
	   dialog_id = -1;	// FIXME, depend on descr_result
	}
    }

    UI::CloseDialog();

    InstMedia::UnmountMedium();

    return `next;
}
