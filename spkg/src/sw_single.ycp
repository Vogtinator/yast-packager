/* 
 * 
 *
 * $Id$
 */

{
  Include( `package_utils() );

  map user_settings = $[];
  
  string architecture = SCR(`Read(.probe.architecture));
  user_settings = add (user_settings, "architecture", architecture );

  string msg_beginner = "";
  string msg_expert = "";
  
  string msg_str11 =   UI(_( "<p>Launch this module to install additional packages or
remove installed ones.
For installing commercial software also launch this module and select
set 'pay' from list of package sets.
</p>" ));

  string msg_str12 = UI(_( "<p>Please insert <b>CD 1</b> for CD installation.</p>"
			   ));

  string msg_str13 = UI(_("<p>Launch this module if you want to choose the
source of installation. It is possible to install packages from CD,
via network or from harddisk.</p>
<p>You can specify the source media and do the
installation of packages within this module.
</p>" ) );
  
  string msg_str21 = UI(_( "<P>You need to be logged in as <i>root</i> in order to
do this.</P>"));


  msg_beginner = msg_str11 + msg_str12 + msg_str21;
  msg_expert = msg_str13 + msg_str21;
  
  // Menuentry for the YaST2 menu
  if (Args() == [ "get_menuentry" ]) 
  {
      return [ 
	      "sw_single", $[
			     "menuentry"    : UI(_("Install/Remove software")),
			     "arguments"    : ["beginner"],
			     "widget"       : `RichText(msg_beginner),
			     "codefragment" : nil ]
      ];
  }
  else if (Args() == [ "get_menuexpert" ])
  {
      return [
	      "sw_single", $[
			     "menuentry"    : UI(_("Choose source of installation")),
			     "arguments"    : [],
			     "widget"       : `RichText(msg_expert),
			     "codefragment" : nil ]
      ];
  }
  
  UI(``{
      /**
       * Create a typical installation wizard dialog.
       */
      OpenDialog(
		 `opt(`defaultsize),
		 `VBox(
		       `ReplacePoint( `id(`image ), `Image( `suseheader, "SuSE") ),
		       `HBox(
			     `HWeight( 30, `ReplacePoint( `id(`helpSpace), `RichText(`id(`help), ""))),
			     `HSpacing(1),
			     `HWeight( 70, `VBox(
						 `VSpacing(0.2),
						 `Left(`Heading(`id(`title), _("YaST2\nInitializing ..."))),
						 `HVCenter(`ReplacePoint(`id(`contents), `Empty())),
						 `HBox(
						       // "back" button: Return to the previous dialog
						       `PushButton(`id(`back), _("&Back")),

						       `HCenter(
								// "abort" button: The installation will be aborted
								`ReplacePoint( `id(`rep_abort), `PushButton(`id(`abort), _("&Abort Installation")))
								),

						       // "next" button: Proceed to the next dialog
						       `ReplacePoint( `id(`rep_next), `PushButton(`id(`next), _("&Next")) )
						       ),
						 `VSpacing(0.2)
						 )
				       ),
			     `HSpacing(1)
			     )
		       )
                 );


      /*
       * Define how the general framework for the installation wizard should
       * look like. This Macro creates and show a dialog.
       */
      define SetWizardContents(string title, term contents, string helptext,
			       boolean has_back, boolean has_next) ``{
	  ChangeWidget(`id(`back), `Enabled, has_back);
	  ChangeWidget(`id(`next), `Enabled, has_next);
	  ChangeWidget(`id(`help), `Value, helptext);
	  ChangeWidget(`id(`title), `Value, title);
	  ReplaceWidget(`id(`contents), contents);
	  SetFocus( `id(`next) );
      };
      
      define size_text (integer bytes) ``{
	  float whole = tofloat (bytes) / 1024.0;
	  // KiloByte abbreviated
	  string unit = _("KB");
	  if (whole > 1024.0|| whole < -1024.0)
          {
	      whole = whole / 1024.0;
	      // MegaByte abbreviated
	      unit = _("MB");
	      if (whole > 1024.0|| whole < -1024.0)
              {
		  whole = whole / 1024.0;
		  // GigaByte abbreviated
		  unit = _("GB");
              }
          }
	  return tostring (whole, 2) + " " + unit;
      };

      /*
       * Small dialog that has a cancel and continue button that
       * appears just befor the video mode is tested.
       */
      define ContinueCancel(string message,
			    string continue_button_message,
			    string cancel_button_message ) ``{
	  OpenDialog(
		     `opt(`decorated),
		     `HBox(
			   `HSpacing(1),
			   `VBox(
				 `VSpacing(0.2),
				 `Label(message),
				 `HBox(
				       `PushButton(`id(`continue), `opt(`default),continue_button_message),
				       `HSpacing(2),
				       `PushButton(`id(`cancel),   cancel_button_message)
				       ),
				 `VSpacing(0.2)
				 ),
			   `HSpacing(1)
			   )
		     );
	  any r = UserInput();
	  CloseDialog();
	  return ( r == `continue );
      };

      /*
       * Are your sure?
       */

      define YesOrNo(any message, string yes_button_message, string no_button_message) ``{
          OpenDialog(
		     `opt(`decorated),
		     `HBox(
			   `HSpacing(1),
			   `VBox(
				 `VSpacing(0.2),
				 `Label(message),
				 `HBox(
				       `PushButton(`id(`yes), `opt(`default), yes_button_message),
				       `HSpacing(2),
				       `PushButton( no_button_message )
				       ),
				 `VSpacing(0.2)
				 ),
			   `HSpacing(1)
			   )
		     );
          any ret = UserInput();
          CloseDialog();
          return (ret == `yes);
      };

      /*
       * Are your sure? with possibiltity to specify default-Button ( values: `no_default, `yes_default )
       */

      define YesNoOpt(any message, string yes_button_message, string no_button_message, symbol def_symbol) ``{
	  term yes_button = `empty();
	  term no_button = `empty();
	  
	  if ( def_symbol == `no_default )
	  {
	      yes_button = `PushButton( `id(`yes),  yes_button_message );
	      no_button  = `PushButton( `id(`no_button), `opt(`default), no_button_message );
	  }
	  else
	  {
	      yes_button = `PushButton(`id(`yes), `opt(`default), yes_button_message);
	      no_button = `PushButton( `id(`no_button), no_button_message );
	  }
	  
          OpenDialog(
		     `opt(`decorated),
		     `HBox(
			   `HSpacing(1),
			   `VBox(
				 `VSpacing(0.2),
				 `Label(message),
				 `HBox(
				       yes_button,
				       `HSpacing(2),
				       no_button
				       ),
				 `VSpacing(0.2)
				 ),
			   `HSpacing(1)
			   )
		     );
          any ret = UserInput();
          CloseDialog();
          return (ret == `yes);
      };


      /*
       * Displays a message to the user in a small dialog with an OK
       * button.
       */

      define DisplayMessage(string message) ``{
          // ok pushbutton: confirm the dialog
          OpenDialog(
		     `opt(`decorated),
		     `HBox(
			   `HSpacing(1),
			   `VBox(
				 `VSpacing(0.2),
				 `Label(message),
				 `PushButton(`opt(`default), _("&OK")),
				 `VSpacing(0.2)
				 ),
			   `HSpacing(1)
			   )
		     );
          UserInput();
          CloseDialog();
      };

  });

  
  string language = UI( `GetLanguage() );

  string default_language = "en";

  map lang2yast1 = ReadY2("lang2yast1.ycp");

  string  long_language	= lookup(lang2yast1, language, "english");
  
  user_settings = add( user_settings, "language", language );
  user_settings = add( user_settings, "continue_mode", false );
  user_settings = add( user_settings, "post_install", true );


  if (size(Args()) > 0 && Args(0) == .test)
  {
      user_settings = add(user_settings, "test_mode", true );
  }
  
  //
  // Get informations for initialisation of PKGINFO server
  //

  list partition = [];

  // get information about diskspace ( used/free space on every partition )
  partition = SCR( `Read(.run.df ) );
 
  // filter out headline and other invalid entries 
  partition = filter( `part, partition, ``( substring ( lookup( part, "name" ), 0, 1 ) == "/" ) );

  // pkginfo expects names of partitions without "/" in front ( exception: "/" itself ) 
  list part_input = [];
  
  foreach( `part, partition, ``{
      map part_info = $[];
      if ( lookup( part, "name" ) != "/" )
      {
	  part_info = add( part_info, "name", substring( lookup( part, "name" ), 1 ) );
      }
      else
      {
	  part_info = add( part_info, "name",  lookup( part, "name" ) );
      }
      part_info = add( part_info, "used",  tointeger(lookup( part, "used" )) );
      part_info = add( part_info, "free",  tointeger(lookup( part, "free" )) );

      part_input = add( part_input, part_info );
  });
  _debug( "SW: partition input: ", part_input ); 
   
  
  /*
   * main dialog loop
   */
  
  list dialog = [
		 `inst_source( true, true ),
		 `inst_sw_single( ),
		 `inst_rpmcopy( false, false ),
		 `inst_suseconfig( false, false )
  ];

  integer id = 0;
  any result = `next;

  boolean skip_source = false;
  
  // do not call inst_source if sw_single is called with Arg "beginner" or Arg = file with package list
  if ( size( Args() ) > 0 )
  {
      if ( Args(0) == "beginner" )
      {
	  boolean go_on = ChangeCD( 1, false);
	  
	  if ( !go_on )
	  {
	      any ret = UI(`ContinueCancel(_("No access to source media used on previous installation.
Continue with choosing new installation source?"), _("&Yes"), _("&No")));

	      if ( ret )		// choose new installation source
	      {
		  skip_source = false;
		  id = 0;
	      }
	      else			// exit the installation dialog
	      {
		  UI(`CloseDialog() );
		  return `cancel;
	      }
	  }
	  else				// mount ok on previos media -> skip inst_source
	  {
	      skip_source = true;
	      id = id + 1;
	  }
      }
      else
      {
	  skip_source = true;		// sw_single called with package list
	  id = id + 1;
      }   
  }
  
  while ((id >= 0) && (id < size (dialog))) {

      if ( symbolof (select( dialog, id )) == `inst_sw_single )
      {
	  any retval = nil;

	  // mount CD 1 BEFORE initializing pkginfo-Server (needed to get commom.pkd)
	  boolean go_on = ChangeCD( 1, true); 
	  if ( !go_on )
	  {
	      // quit dialog (CD 1 cannot be skipped)
	      UI( `CloseDialog() );      
	      return `cancel;
	  }

	  boolean version_ok = false;
	  string instSource = GetInstSource(1);
	  string infopath =  instSource + "setup/descr";
	  string dudir = instSource + "setup/du/du.dir";

	
	  UI(`OpenDialog(`opt(`decorated ),`Label(_("Reading package information; One moment please..."))));
	  
	  retval = PKGINFO (`setEnvironment( $["packageinfopath":infopath, "common.pkd":"common.pkd",
					      "language":long_language,  "dudir":dudir,
					      "partition":part_input, "rootpath":"/",
					      "yastpath":"/var/lib/YaST",
					      "update":true,
					      "memoptimized":true,
					      "forceInit":true]		// force initialisation

					     ));
	  _debug( "SW: Return  PKGINFO(`setEnvironment()", retval );	

	  UI(`CloseDialog());
	      
	  _debug("SW: VERSION: ", PKGINFO (`compareSuSEVersions()));

	  if ( lookup( PKGINFO (`compareSuSEVersions()), "installedGreater", false ) )
	  {
	      if ( IsRemountable() )
	      {
		  SCR(`Execute(.shell, "/bin/umount /var/adm/mount") );
	      }
	      
	      UI(`DisplayMessage(_("The version of SuSE distribution on source media
must NOT be older than the installed one.
Please insert actual CD or specify path of actual sources.")));
	      version_ok = false;
	  }
	  else
	  {
	      version_ok = true;
	  }

          // There could be a list of packages which have to be installed.
	  // ( Defined in an ascii-file, which path is given via argument. )
	  if ( size(Args() ) > 0 && Args(0) != "beginner" )
	  {
	      string pathname = Args(0);

	      map|any installMap = $[];
	      
	      string fileCommand = "test -f " + pathname;
	      boolean file_found = (Shell(fileCommand) == 0);

	      if ( !file_found )
	      {
		  // It could be a single package which have to be installed.
		  list install_list = [];
		  install_list = add ( install_list, Args(0) );
		  installMap = add ( installMap, "install", install_list );
		  y2log ( .milestone, "sw_single", 1,
			  sformat ( "package %1 will be installed", Args(0) ));
	      }
	      else
	      {
		  y2log ( .milestone, "sw_single", 1,
			  sformat ( "Reading file %1", pathname ) );
		  installMap = Read ( pathname );
	      }
	      y2log ( .milestone, "sw_single", 2,
		      sformat ( "installMap: %1", installMap ) );
      

	      if ( installMap == nil || size ( installMap ) == 0 )
	      {
		  string message = UI(_("Error while reading onfiguration-file."));
		  UI(`DisplayMessage(message));
		  ret_single = `cancel;
	      }
	      else
	      {
		  list installList = lookup ( installMap, "install", [] );
		  list deleteList = lookup ( installMap, "delete", [] );
		  boolean userInput = lookup ( installMap, "userInput", false );

		  y2log ( .milestone, "sw_single)", 2,
			  sformat ( "installList: %1", installList ) );
		  y2log ( .milestone, "sw_single)", 2,
			  sformat ( "deleteList: %1", deleteList ) );
		  y2log ( .milestone, "sw_single)", 2,
			  sformat ( "userInput: %1", userInput ) );

	  
		  foreach( `package, installList, ``{
		      any r = PKGINFO( `selectInstall( package ));
		      _debug( "PKGINFO selectInstall: ", package );
		  } );           

		  foreach( `package, deleteList, ``{
		      any r = PKGINFO( `selectDelete( package ) );
		      _debug( "PKGINFO selectDelete: ", package );
		  } );
	       
		  // Checking dependecies
		  map pac_depends = PKGINFO(`getDependencies());
	   
		  list(map) or_depends = lookup( pac_depends, "OR" );
		  _debug( "OR Dependencies:", or_depends );
		  list(map) xor_depends = lookup( pac_depends, "XOR" );
		  _debug( "XOR Dependencies:", xor_depends );

		  if ( userInput == true )
		  {
		      result = CallFunction( `inst_sw_single( `post_install,
							      `not_only_checked,
							      part_input ) );
		  }
		  else
		  {
		      if ( or_depends != [] || xor_depends != [] )
		      {
			  // There is an unresolved dependency -> call
			  // single-package-selection to solve it.
			  result = CallFunction( `inst_sw_single( `post_install,
								  `only_check,
								  part_input) );
		      }
		      else
		      {
			  // install anyway
			  result = `ok;
		      }
		  }
	      }
	  }
	  else if ( version_ok )
	  {
	      // Calling inst_sw_single
	      result = CallFunction( `inst_sw_single( `post_install,
						      `not_only_checked,
						      part_input ) );

	  }
	  else
	  {
	      // continue with inst_source
	      id = 0;
	      continue;
	  }
      }
      else
      {
	  result = CallFunction( select(dialog, id) );
      }
      _debug ( "RESULT: ", select(dialog, id), result );

      if (result == `cancel || result == `abort)
      {
	  // dialog loop ends
	  id = size( dialog ) +1; 
      }
      else if (result == `auto)
      {
	  // inst_suseconfig returns `auto -> last module, dialog loop ends
	  id = id + 1;			
      }
      else if (result == `next )		
      {
	  id = id + 1;
      }
      else if (result == `ok )	// inst_sw_single returns `ok
      {
	  // setting user_setting.install_info for packages which have to be installed
	  list install_info =  PKGINFO ( `getInstallSet() );
	  // _debug ( "Writing install_info: ", install_info );
	  user_settings = add ( user_settings , "install_info", install_info );

	  list delete_info =  PKGINFO ( `getDeleteSet() );
	  // _debug ( "Writing delete_info: ", delete_info );
	  user_settings = add ( user_settings , "delete_info", delete_info );

	  _debug( "SW: Usersettings: ", user_settings );

	  if ( install_info != [] || delete_info != [] )
	  {
	      id = id + 1;  
	  }
	  else
	  {
	      _debug( "Nothing selected" );
	      // dialog loop ends
	      id = id+3;
	  }
      }
      else if (result == `back)
      {
	  id = id - 1;
      }
      else if (result == `cancel_single)
      {
	  if ( !skip_source )
	  {
	      id = id - 1; 
	  }
	  else
	  {
	      id = id - 2;
	  }
      }
      
  }

  UI(`CloseDialog());
  
  // umount CD (safety reasons)
 if ( IsRemountable() )
 {
     SCR(`Execute(.shell, "/bin/umount /var/adm/mount") );
 }
  
  return `next;
}
