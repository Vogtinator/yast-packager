/* 
 * 
 *
 * $Id$
 */

{
  // Menuentry for the YaST2 menu
  if (Args() == [ "get_menuentry" ]) 
      return [ 
	      "sw_single", $[
			     `menuentry    : UI(_("Install/Remove packages")),
			     `arguments    : [ ],
			     `widget       : `RichText(
						       UI(_( "<P>Launch this module to install additional packages or
remove installed ones.
For installing commercial software also launch this module and select
set 'pay' from list of package sets.
</P>
Please insert <b>CD 1</b> before proceeding.
<P>You need to be logged in as <i>root</i> in order to
do this.</P>"))),
			     `codefragment : nil ]
      ];

  UI(``{

      define size_text (integer bytes) ``{
	  float whole = tofloat (bytes) / 1024.0;
	  // KiloByte abbreviated
	  string unit = _("KB");
	  if (whole > 1024.0)
          {
	      whole = whole / 1024.0;
	      // MegaByte abbreviated
	      unit = _("MB");
	      if (whole > 1024.0)
              {
		  whole = whole / 1024.0;
		  // GigaByte abbreviated
		  unit = _("GB");
              }
          }
	  return tostring (whole, 2) + " " + unit;
      };

      /*
       * Small dialog that has a cancel and continue button that
       * appears just befor the video mode is tested.
       */
      define ContinueCancel(string message,
			    string continue_button_message,
			    string cancel_button_message ) ``{
	  OpenDialog(
		     `opt(`decorated),
		     `HBox(
			   `HSpacing(1),
			   `VBox(
				 `VSpacing(0.2),
				 `Label(message),
				 `HBox(
				       `PushButton(`id(`continue), `opt(`default),continue_button_message),
				       `HSpacing(2),
				       `PushButton(`id(`cancel),   cancel_button_message)
				       ),
				 `VSpacing(0.2)
				 ),
			   `HSpacing(1)
			   )
		     );
	  any r = UserInput();
	  CloseDialog();
	  return ( r == `continue );
      };

      /*
       * Are your sure?
       */

      define YesOrNo(any message, string yes_button_message, string no_button_message) ``{
          OpenDialog(
		     `opt(`decorated),
		     `HBox(
			   `HSpacing(1),
			   `VBox(
				 `VSpacing(0.2),
				 `Label(message),
				 `HBox(
				       `PushButton(`id(`yes), `opt(`default), yes_button_message),
				       `HSpacing(2),
				       `PushButton( no_button_message )
				       ),
				 `VSpacing(0.2)
				 ),
			   `HSpacing(1)
			   )
		     );
          any ret = UserInput();
          CloseDialog();
          return (ret == `yes);
      };

      /*
       * Are your sure? with possibiltity to specify default-Button ( values: `no_default, `yes_default )
       */

      define YesNoOpt(any message, string yes_button_message, string no_button_message, symbol def_symbol) ``{
	  term yes_button = `empty();
	  term no_button = `empty();
	  
	  if ( def_symbol == `no_default )
	  {
	      yes_button = `PushButton( `id(`yes),  yes_button_message );
	      no_button  = `PushButton( `id(`no_button), `opt(`default), no_button_message );
	  }
	  else
	  {
	      yes_button = `PushButton(`id(`yes), `opt(`default), yes_button_message);
	      no_button = `PushButton( `id(`no_button), no_button_message );
	  }
	  
          OpenDialog(
		     `opt(`decorated),
		     `HBox(
			   `HSpacing(1),
			   `VBox(
				 `VSpacing(0.2),
				 `Label(message),
				 `HBox(
				       yes_button,
				       `HSpacing(2),
				       no_button
				       ),
				 `VSpacing(0.2)
				 ),
			   `HSpacing(1)
			   )
		     );
          any ret = UserInput();
          CloseDialog();
          return (ret == `yes);
      };


      /*
       * Displays a message to the user in a small dialog with an OK
       * button.
       */

      define DisplayMessage(string message) ``{
          // ok pushbutton: confirm the dialog
          OpenDialog(
		     `opt(`decorated),
		     `HBox(
			   `HSpacing(1),
			   `VBox(
				 `VSpacing(0.2),
				 `Label(message),
				 `PushButton(`opt(`default), _("&OK")),
				 `VSpacing(0.2)
				 ),
			   `HSpacing(1)
			   )
		     );
          UserInput();
          CloseDialog();
      };

  });

    
  // mount CD 

  define MyChangeCD(integer cdnum) ``{
      boolean ret = true;
      
      Shell ("/bin/mount /dev/cdrom /var/adm/mount");
	
      integer|void actcdnum = nil;
      while (true) {
	  // reading /cdrom/.S.u.S.E-disk-001.2000032902 file
	  actcdnum = SCR(`Read(.yast2.instsource.cdnum));
	  if (actcdnum == cdnum) return true;
	  else {
	      Shell ("/bin/umount /var/adm/mount");

	      // advise user to insert the right CD
	      string message = sformat(UI(_("Please insert CD %1.")), cdnum);
	      if (is(actcdnum, integer)) 
		  // inform user about current CD
		  message = sformat(UI(_("%1\nCurrently CD %2 is inserted.")), message, actcdnum);

	      ret = UI(`ContinueCancel(message, _("&OK"), _("&Cancel")) );

	      if ( ret == false )
		  break;
	      else
		  Shell ("/bin/mount /dev/cdrom /var/adm/mount");
	  }
      }

      return ret;
  };

  // map user_settings contains:
  // - install_info -> module inst_rpmcopy
  // - delete_info  -> module inst_rpmcopy
  // - continue_mode -> module inst_rpmcopy
  // - language -> module inst_rpmcopy
  
  map user_settings = $[];
  
  string language = UI( `GetLanguage() );

  string default_language = "en";
  string default_architecture = "i386";

  map lang2yast1 = $[
		     "en_GB"    : "english",
		     "en_US"    : "english",
		     "en"	 : "english",
		     "de_DE"    : "german",
		     "de_CH"    : "german",
		     "de" 	 : "german",
		     "br_FR"    : "french",
		     "fr_FR"    : "french",
		     "fr_CH"    : "french",
		     "fr"       : "french",
		     "it_IT"    : "italian",
		     "es_ES"    : "spanish",
		     "nl_NL"    : "dutch",
		     "pt_PT"    : "portuguese",
		     "pt_BR"    : "brazilian",
		     "hu_HU"    : "hungarian",
		     "pl_PL"    : "polish",
		     "el_GR"    : "greek",
		     "ru_RU.KOI8-R" : "russian",
		     "cs_CZ"    : "czech",
		     "sk_SK"    : "slovak"
  ];

  string  long_language 	= lookup(lang2yast1, language, "english");
  
  // informations needed in inst_rpmcopy
  user_settings = add( user_settings, "language", language );
  user_settings = add( user_settings, "continue_mode", false );
  user_settings = add( user_settings, "post_install", true );
  
  // !!!!!!!!!!!!!!! ONLY FOR TESTING !!!!!!!!!!!!!!!!!!!!
  // user_settings = add(user_settings, "test_mode", true );
  // !!!!!!!!!!!!!!! ONLY FOR TESTING !!!!!!!!!!!!!!!!!!!!

  //
  // Initialize PKGINFO server
  //

  // mount CD 1 BEFORE initializing pkginfo-Server
  // (needed to get commom.pkd)

  boolean go_on = MyChangeCD(1);

  if ( !go_on )
  {
      // quit dialog
      return `cancel;
  }
  
  string infopath =  "/var/adm/mount/suse/setup/descr";
  string dudir = "/var/adm/mount/suse/setup/du/du.dir";

  list partition = [];

  // get information about diskspace ( used/free space on every partition )
  partition = SCR( `Read(.run.df ) );
  
  _debug ( "DF DF DF: ", partition );

 
  // filter out headline and other invalid entries 
  partition = filter( `part, partition, ``( substring ( lookup( part, "name" ), 0, 1 ) == "/" ) );

  // pkginfo expects names of partitions without "/" in front ( exception: "/" itself ) 
  list part_input = [];
  
  foreach( `part, partition, ``{
      map part_info = $[];
      if ( lookup( part, "name" ) != "/" )
      {
	  part_info = add( part_info, "name", substring( lookup( part, "name" ), 1 ) );
      }
      else
      {
	  part_info = add( part_info, "name",  lookup( part, "name" ) );
      }
      part_info = add( part_info, "used",  tointeger(lookup( part, "used" )) );
      part_info = add( part_info, "free",  tointeger(lookup( part, "free" )) );

      part_input = add( part_input, part_info );
  });

  _debug( "SW: part_input: ", part_input ); 
   
  UI(`OpenDialog(`opt(`decorated ),`Label(_("One moment please..."))));
  
  // Initialisierung
  any retval = PKGINFO (`setEnvironment( $["packageinfopath":infopath, "common.pkd":"common.pkd",
					  "language":long_language,  "dudir":dudir,
					  "partition":part_input, "rootpath":"/",
					  "yastpath":"/var/lib/YaST",
					  "update":true,
					  "memoptimized":true]
					 ));

  _debug( "SW: Return  PKGINFO (`setEnvironment()", retval );
   
  PKGINFO( `setDebugLevel(3) );

  UI( `CloseDialog() );

  // Calling inst_sw_single
  any ret_single = CallFunction( `inst_sw_single( `post_install, `not_only_checked, part_input ) );
  
  _debug( "SW: Return inst_sw_single ", ret_single );

  any ret_rpm = nil;
  
  if ( ret_single == `ok )
  {
      // setting user_setting.install_info for packages which have to be installed
      list install_info =  PKGINFO ( `getInstallSet() );
      // _debug ( "Writing install_info: ", install_info );
      user_settings = add ( user_settings , "install_info", install_info );

      list delete_info =  PKGINFO ( `getDeleteSet() );
      // _debug ( "Writing delete_info: ", delete_info );
      user_settings = add ( user_settings , "delete_info", delete_info );

      _debug( "SW: Usersettings: ", user_settings );
	
      ret_rpm = CallFunction( `inst_rpmcopy (false, false) );

      if ( ret_rpm  == `next )
      {
	  CallFunction( `inst_suseconfig (false, false) );
      }
  }

  // umount CD
  Shell ("/bin/umount /var/adm/mount");
  
  return `next;
}
