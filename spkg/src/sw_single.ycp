/**
 * Module: 		sw_single.ycp
 *
 * Authors: 		Gabriele Strattner (gs@suse.de)
 *
 * Purpose: 		contains dialog loop for workflows:
 *	"Install/Remove software" 	called with argument "beginner", i.e. skip inst_source if possible
 *	"Change source of installation" without argument 	-> workflow starts with inst_source
 *
 * String corrections by Christian Steinruecken <cstein@suse.de>, 2001/08/01
 *
 *
 * $Id$
 */

{
    textdomain "packager";

    import "Arch";
    import "Installation";
    import "Mode";
    Mode::normal = true;	// system is already installed

    import "Packages";
    import "PackageCallbacks";

    import "Wizard";
    include "ui/common_popups.ycp";
    include "ui/common_functions.ycp";

    list packagelist = [];		// list of packages to install

    boolean test_popup = false;
    boolean beginner_mode = false;
    boolean skip_source = false;

    // =============================================================

    // check test_popup
    // test_mode is checked for in Installation constructor

    global define list CheckArguments ()
    ``{

	integer arg_n = size (WFM::Args()) - 1;

	list arg_list = [];

	while (arg_n >= 0)
	{
	    if (WFM::Args(arg_n) == .test)
	    {
		Mode::test = true;
	    }
	    else if (WFM::Args(arg_n) == .testp)
	    {
		Mode::test = true;	// .testp implies .test
		test_popup = true;
	    }
	    else if (is (WFM::Args(arg_n), string))
	    {
		if (WFM::Args(arg_n) == "beginner")
		{
		    beginner_mode = true;
		}
		else
		{
		    arg_list = add (arg_list, WFM::Args(arg_n));
		}
	    }
	    else if (is (WFM::Args(arg_n), list))
	    {
		foreach (`arg, WFM::Args(arg_n), ``{ arg_list = add (arg_list, arg);});
	    }
	    arg_n = arg_n - 1;
	}

	y2milestone( "SW_SINGLE: arguments %1, beginner mode: %2",
		     arg_list, beginner_mode );

	return arg_list;

   };  // CheckArguments

   //
   // CheckWhichPackages
   //
   // Check arg_list:
   // If we're called with an absolute package path just install
   // this package without paying attention to dependencies.
   // If we are not started in "beginner" mode go `next
   // (and call dialog change source medium first).
   // Otherwise we start the package manager.
   //
   // returns	`done		all done
   //		`failed		package not found
   //		`next		workflow "Change source of installation"
   //		`found_descr	started package manager
   //		`unknown_descr	found nothing
   //

   define symbol CheckWhichPackages (list arg_list)
   ``{
	y2milestone ("CheckWhichPackages (%1)", arg_list);
	// if sw_single is called with a list of packages or a package name
	// or in  beginner mode try to mount source medium

	string first_arg = "";

	if ( size (arg_list) > 0 )
	{
	    first_arg = arg_list[0]:"";
	}
	else if ( !beginner_mode )
	{
	    return `next;	// workflow "Change source of installation", i.e.
	                        // start with dialog inst_source
	}

	if ( regexpmatch (first_arg, "\\.rpm$") )		// package name given
	{
            // if sw_single is called with an absolute package-pathname, there is no need to
	    // mount the source medium or check SuSE version or dependencies

	    if ( SCR::Read(.target.size, first_arg) > 0 )
	    {

		y2milestone( "SW_SINGLE: installing  %1", first_arg );
		Pkg::TargetInstall (first_arg);

		// package is installed without paying attention to SuSE dependencies
		// don't call SuSEConfig -> dialog loop ends
		return `done;
	    }
	    else
	    {
		string message = sformat (_("Package %1 was not found on the medium."), select(arg_list, 0,"") );
		y2error( "SW_SINGLE: Package %1 was not found on the medium", select(arg_list, 0,"") );
		UI::MessagePopup(message);

		return `failed;
	    }
	}
	else if (first_arg != "")		// firstarg given, but not *.rpm
	{
	    string arg_name = arg_list[0]:"";

	    if ( SCR::Read(.target.size, arg_name) <= 0 )		// a local file ?
	    {
		packagelist = arg_list;					// No: expect package names
	    }
	    else							// Yes: try to read the file
	    {
		y2milestone("Reading file %1", arg_name );
		packagelist = SCR::Read( .target.ycp, arg_name);
	    }
	    y2milestone("packagelist: %1", packagelist );
	}

	UI::OpenDialog(`opt(`decorated ),`Label(_("Reading package information; One moment please...")));

        // start package manager

        if (size (Pkg::SourceStartCache(true)) <= 0)
	{
	    UI::CloseDialog();
	    return `unknown_descr;
	}

	Pkg::TargetInit ("/", false);

	PackageCallbacks::InitCallbacks();

	UI::CloseDialog();

	return `found_descr;

    };	// CheckWhichPackages

    // =============================================================

    string msg_beginner = "";
    string msg_expert = "";

    string msg_str11 =   _("<p>Launch this module to install additional packages or
remove installed ones.
To install commercial software, launch this module and select
'pay' from list of package sets.
</p>
");

    string msg_str13 = _("<p>Launch this module to choose the
source of installation. It is possible to install packages from CD,
via network, or from a hard drive.</p>
<p>You can specify the source medium and install
packages with this module.
</p>

");

    string msg_str21 = _("<P>You need to be logged in as <i>root</i> to
do this.</P>
");

    msg_beginner = msg_str11 + msg_str21;
    msg_expert = msg_str13 + msg_str21;

    string wrong_media_msg = _("Please make sure the installation medium is correct.");

    string language = UI::GetLanguage(true);

    Wizard::CreateDialog();

    // check Args
    // set test_mode, test_popup, beginner_mode

    list arg_list = CheckArguments();

    // check the arguments and try the mount/search for local description
    symbol result = CheckWhichPackages (arg_list);

    y2milestone ("SW_SINGLE: result CheckWhichPackages %1", result);

    if ((result == `done)
	|| (result == `failed))
    {
	UI::CloseDialog();
	return `next;
    }
    else if ((result == `next)
	      || (result == `unknown_descr))
    {
	if (WFM::CallFunction( `inst_source ( true, true )) == `next)
	    result = `found_descr;
    }

    if (result == `found_descr)
    {
	if (size (packagelist) == 0)			// packages given ?
	{
	    result = WFM::CallFunction( `inst_packages ());	// No: ask user
	    y2milestone ("inst_packages returns %1", result);
	    result = `next;	// FIXME
	}
	else
	{
	    foreach (`package, packagelist,			// Yes: install them
	    ``{
		Pkg::PkgInstall (package);
	    });
	    result = `next;
	}
    }

    if (result == `next)				// packages selected ?
    {
	Pkg::PkgCommit (0);				// Y: commit them !
	result = WFM::CallFunction( `inst_suseconfig (false, false));
    }

    UI::CloseDialog();

    return result;
}
