/**
 * Module:
 *   sw_single
 *
 * Summary:
 *   Provide installation on demand.
 *
 * Authors:
 *   Martin Vidner <mvidner@suse.cz>
 *
 * $Id$
 */

{

    textdomain "sw_single";

    include "ui/common_messages.ycp";

 
    /**
     * Is this package installed?
     * @param package
     * @return boolean
     */
    global define IsPackageInstalled (string package) ``{
	string query = sformat("/bin/rpm -q %1", package);
	return 0 == SCR (`Execute (.target.bash, query));
    }

    /**
     * Is any of these packages installed?
     * @param packages
     * @return boolean
     */
    global define IsAnyPackageInstalled (list(string) packages) ``{
	string which = find(`p, packages, ``{
	    return IsPackageInstalled (p);
	});
	return which != nil;
    }

    /**
     * Are all of of these packages installed?
     * @param packages
     * @return boolean
     */
    global define AreAllPackagesInstalled (list(string) packages) ``{
	string which = find(`p, packages, ``{
	    return ! IsPackageInstalled (p);
	});
	return which == nil;
    }

    /**
     * Install required packages and remove conflicting packages.
     * @param toinstall packages to install
     * @param toremove pacakges to remove
     * @return boolean true :(
     */
    global define DoInstallAndRemove (list(string) toinstall, list(string) toremove) ``{
	map script = $[
	    "userInput": false,
	    "install": toinstall,
	    "delete": toremove
	    ];
	
	string fn = SCR (`Read (.target.tmpdir));
	fn = fn + "/script.sw_single";
	SCR (`Write (.target.ycp, fn, script));
	CallFunction (`sw_single (fn));

	return true;
    }

    /**
     * Install and remove packages.
     * The user is presented an explanation and asked to confirm the
     * changes. Then sw_single is called to do the job.
     * @param require Required packages
     * @param conflict Conflicting packages
     * @param help Explanation (rich text). %1 and %2 represent a comma separated list of packages to be installed/removed
     * @return boolean installation successful
     */
    global define InstallAndRemove (list(string) require, list(string) conflict, string help) ``{
	list(string) toinstall = filter (`p, require, ``(!IsPackageInstalled (p)));
	list(string) toremove = filter (`p, conflict, ``(IsPackageInstalled (p)));
	string message = sformat (help, 
				  mergestring (toinstall, ", "), 
				  mergestring (toremove, ", ")
				  );
	term d = `VBox (
	    `HSpacing (40),
	    `RichText (message),
	    `HBox (
		`PushButton (`id (`continue), `opt (`default), ContinueButtonLabel ()),
		`PushButton (`id (`cancel), CancelButtonLabel ())
		)
	    );
	UI (`OpenDialog (d));
	any ui = UI (`UserInput ());
	UI (`CloseDialog ());
	if (ui == `continue)
	{
	    return DoInstallAndRemove (toinstall, toremove);
	}
	return false;
    }

    /**
     * Ensure that all required packages are installed and no
     * conflicting packages are installed. If it is not the case, the
     * user is presented an explanation and asked to confirm the
     * changes. Then sw_single is called to do the job.
     * @param require Required packages
     * @param conflict Conflicting packages
     * @param help Explanation (rich text). %1 and %2 represent a comma separated list of packages to be installed/removed
     * @return boolean installation successful
     */
    global define RequireAndConflict (list(string) require, list(string) conflict, string help) ``{
	if (AreAllPackagesInstalled (require) &&  !IsAnyPackageInstalled (conflict))
	{
	    return true;
	}
	else
	{
	    return InstallAndRemove (require, conflict, help);
	}
    }
}
