/**
 * Module: 		PackageCallbacks.ycp
 *
 * Authors:		Gabriele Strattner <gs@suse.de>
 *			Klaus Kaempf <kkaempf@suse.de>
 *
 * Purpose: 		provides the default Callbacks for Pkg::
 *
 * $Id$
 */

{
    module "PackageCallbacks";

    textdomain "packager";

    include "ui/common_messages.ycp";
    include "ui/common_functions.ycp";

    global boolean _provide_popup = false;

   //--------------------------------------------------------------------------
   // defaults

   /** at start of file providal
    *
    */
    global define void StartProvide (string name, integer archivesize, boolean remote)
    ``{
	if (remote)
	{
	    term providebox = `VBox( `HSpacing(40), `ProgressBar(`id(`progress), name, 100, 0 ));

	    UI::OpenDialog( providebox );
	    _provide_popup = true;
	}
	return;
   }


   /** during file providal
    *
    */
   global define void ProgressProvide (integer percent)
   ``{
	if (_provide_popup)
	    UI::ChangeWidget(`id(`progress), `Value, percent);
	return;
   }


   /** during file providal
    *
    */
   global define void DoneProvide (integer error, string reason)
   ``{
	if (_provide_popup)
	    UI::CloseDialog();
	_provide_popup = false;
	return;
   }


   /** at start of package install
    *
    */
   global define void StartPackage (string name, string summary, integer installsize, boolean is_delete)
   ``{
	term packagebox = `HBox (`HStretch(),
				     `VBox( `Label(`id(`package), name ),
				     `VSpacing(),
				     `HBox(`ProgressBar(`id(`progress), " ", 100, 0 )),
				     `HStretch()
				  ));
	    UI::OpenDialog( `opt(`decorated), packagebox );

	return;
   }


   /** during package install
    *
    */
   global define void ProgressPackage (integer percent)
   ``{
	UI::ChangeWidget(`id(`progress), `Value, percent);
	return;
   }


   /** after package install
    *
    */
   global define void DonePackage (integer error, string name)
   ``{
	UI::CloseDialog();
	return;
   }

//=============================================================================
//	MEDIA CHANGE
//=============================================================================


    // make showLongInfo module-global so it gets remembered (cf. #14018)
    boolean showLongInfo = false;

    // media change callback
    // return "" for ok, retry
    // return "E" for eject
    // return "S" for skip
    // return "C" for cancel (not implemented !)
    // return url to change media URL

    global define string MediaChange (string error, string url, string product, integer current, integer wanted)
    ``{

	y2milestone ("MediaChange err'%1', url'%2', prd'%3', cur'%4', wan'%5'", error, url, product, current, wanted);
	term button_box = `PushButton(`id(`cancel), `opt(`default), OKButtonLabel() );

        // will be used in conjunction with other text below
        // prompt for user to insert the correct CD/DVD
	string message = sformat(_("Please insert\n'%1'  %2"), product, ("CD "+ wanted));

	// currently unused
	string media_prompt =_("The correct source medium could not be mounted.");

	button_box = `HBox(
			   `PushButton(`id(`continue), `opt(`default), OKButtonLabel() ),
			   `PushButton(`id(`skip), _("&Skip") ),
			   `PushButton(`id(`eject), _("&Eject"))
			   );

	if ( showLongInfo )
	{
	    UI::OpenDialog( `opt(`decorated), UI::LayoutPopup (message, button_box, 10, true) );
	    UI::ReplaceWidget(`id(`info), `RichText(error) );
	}
	else
	{
	    UI::OpenDialog( `opt(`decorated),  UI::LayoutPopup (message, button_box, 2, false) );
	    UI::ReplaceWidget(`id(`info), `Empty() );
	}

	any r = nil;

	UI(``{
	    global define ShowLogInfo (string message, term buttonbox) ``{
		if (QueryWidget(`id(`show), `Value ))
		{
		    CloseDialog();
		    OpenDialog( `opt(`decorated), LayoutPopup (message, buttonbox, 10, true) );
		    return true;
		}
		else
		{
		    CloseDialog();
		    OpenDialog( `opt(`decorated),  LayoutPopup (message, buttonbox, 2, false) );
		    ReplaceWidget(`id(`info), `Empty() );
		}
		return false;
	    };
	});

	repeat
	{
	    r = UI::UserInput();
	    if ( r == `show )
	    {
		showLongInfo = UI::ShowLogInfo (message, button_box);
		if (showLongInfo)
		    UI::ReplaceWidget(`id(`info), `RichText(error));
		else
		    UI::ReplaceWidget(`id(`info), `Empty() );
	    }

	} until (r == `cancel || r == `continue || r == `eject);

	y2milestone ("MediaChange %1", r);

	UI::CloseDialog();

	if (r == `cancel)
	    return "C";
	if (r == `skip)
	    return "S";
	if (r == `eject)
	    return "E";
	if (r == `url)
	    return url;

	return "";
    }


//=============================================================================
//	MEDIA ERROR
//=============================================================================



    /**
     * media open/attach callback
     *
     */
    global define string MediaError (integer error)
    ``{
	y2milestone ("MediaError(%1)", error);
	//UI::MessagePopup ("Error accessing media:\n"+error);
	return "";
    }

    global define void SetMediaCallbacks ()
    ``{
	foreach (`src, Pkg::SourceGetCurrent(),
	``{
	    Pkg::CallbackMediaChange (src, "PackageCallbacks::MediaChange");
	    Pkg::CallbackMediaError (src, "PackageCallbacks::MediaError");
	});
    }

    /**
     * constructor
     *
     */

    global define void PackageCallbacks()
    ``{
	y2milestone ( "PackageCallbacks constructor" );

	Pkg::CallbackStartProvide ("PackageCallbacks::StartProvide");
	Pkg::CallbackProgressProvide ("PackageCallbacks::ProgressProvide");
	Pkg::CallbackDoneProvide ("PackageCallbacks::DoneProvide");
	Pkg::CallbackStartPackage ("PackageCallbacks::StartPackage");
	Pkg::CallbackProgressPackage ("PackageCallbacks::ProgressPackage");
	Pkg::CallbackDonePackage ("PackageCallbacks::DonePackage");

	Pkg::SourceStartCache (true);

	SetMediaCallbacks ();

    UI::{
    // UI USE
    // creates layout for ChangMediumPopup

    global define LayoutPopup ( string message, term button_box, integer vertical_size, boolean info_on )
    ``{

	term dialog_layout =  `VBox(`HSpacing(40),
				    `Left(`Heading (NotifyMsg())),
				    `VBox( `VSpacing(0.1),
					   `Left(`Label( message)),
					   `Left(`CheckBox(`id(`show), `opt(`notify), _("Show &details"), info_on )),
					   `VSpacing(0.4),
					   `HBox(`VSpacing(vertical_size),
						 `HSpacing(0.1),
						 `ReplacePoint(`id(`info), `Empty()),
						 `HSpacing(0.1)
						 ),
					   `HBox(`HSpacing(0.1),
						 button_box,
						 `HSpacing(0.1)
						 ),
					   `VSpacing(0.2)
					   )
				    );
	return dialog_layout;
    };
    }; // UI()
    }
}
