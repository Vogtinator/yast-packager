/**
 * Module: 		PackageCallbacks.ycp
 *
 * Authors:		Gabriele Strattner <gs@suse.de>
 *			Klaus Kaempf <kkaempf@suse.de>
 *
 * Purpose: 		provides the Callbacks for Pkg::
 *
 * $Id$
 */

{
    module "PackageCallbacks";

    textdomain "packager";

   //--------------------------------------------------------------------------
   // defaults

   /** at start of file providal
    *
    */
   global define void StartProvide (string name, integer archivesize)
   ``{
	y2milestone ("StartProvide(%1,%2)", name, archivesize);
   }


   /** during file providal
    *
    */
   global define void ProgressProvide (integer percent)
   ``{
	y2milestone ("ProgressProvide(%1)", percent);
   }


   /** at start of package install
    *
    */
   global define void StartInstall (string name, string summary, integer installsize, boolean is_delete)
   ``{
	y2milestone ("StartInstall(%1,%2,%3,%4)", name, summary, installsize, is_delete);
   }


   /** during package install
    *
    */
   global define void ProgressInstall (integer percent)
   ``{
	y2milestone ("ProgressInstall(%1)", percent);
   }


   /** after package install
    *
    */
   global define void DoneInstall (string name)
   ``{
	y2milestone ("DoneInstall(%1)", name);
   }


    /**
     * media change callback
     *
     */
    global define string MediaChange (string product, string error, integer current, integer wanted)
    ``{
	y2milestone ("change (err %1, now %2, want %3)", error, current, wanted);
	// prompt user for product (%1, e.g. "SuSE Linux Professional 8.1") and media (%2, e.g. "CD 1"),
	string message = sformat (_("Please insert %1 %2."), wanted);
	string info = sformat ("Found media #%1 (error %2)", current, error);
	any ret = MediaUI::ChangeMediumPopup (message, info);
	if (ret == `continue)
	    return "";
	return "1";
    }

    /**
     * media open/attach callback
     *
     */
    global define string MediaError (integer error)
    ``{
	y2milestone ("MediaError(%1)", error);
	UI::MessagePopup ("Error accessing media:\n"+error);
	return "";
    }


   //--------------------------------------------------------------------------
   // slide show

   /**
     * Callback that will be called by the packager for each RPM as it is being installed or deleted.
     * Note: The packager doesn't call this directly - the corresponding wrapper callbacks do
     * and pass the "deleting" flag as appropriate.
     **/
    global define symbol DisplayStartInstall ( string  pkg_name,
					    string  pkg_description,
					    integer disk_usage,
					    integer disk_capacity,
					    boolean deleting )
    ``{

	// y2debug( "CyclicUpdateCallback: pkg_name: %1 pkg_description: %2 pkg_percent: %3", pkg_name, pkg_description, pkg_percent );

	SlideShow::SlideDisplayStart ( pkg_name, pkg_description, deleting );

	integer how_much = (disk_usage * 100) / disk_capacity;

	// warn user about exhausted diskspace during installation (not if deleting packages)
	if (!deleting)
	{
	    if (how_much > 95 && !shutup)
	    {
		boolean cont = UI::AnyQuestionPopup( WarningMsg(),
						     _("The disk space is nearly exhausted.
Do you want to go on with the installation?\n"),
						     YesButtonLabel(),
						     NoButtonLabel(),
						     `focus_no );

		if (!cont)
		    return `cancel;
		else
		    shutup = true;
	    }
	}

	any button = UI::PollInput();

	// in case of cancel ask user if he really wants to quit installation
	if ( button == `abort )
	{
	    boolean ret = false;

	    if ( Mode::normal )
	    {
		ret = UI::AnyQuestionPopup( NoHeadline(),
					    _("Do you really want\nto quit the installation?"),
					    YesButtonLabel(),
					    NoButtonLabel(),
					    `focus_no );
	    }
	    else if ( Mode::initial )
	    {
		ret = UI::ConfirmAbortPopup( `unusable );
	    }
	    else	// Mode::update, Mode::cont
	    {
		ret = UI::ConfirmAbortPopup( `incomplete );
	    }

	    if ( ret )
		return `cancel;

	}
	else
	{
	    SlideShow::ProcessButtonPress( button );
	}

	return nil;
    };


   /**
     * CallbackDisplayProgress percent
     **/

    global define symbol CallbackDisplayProgress(integer pkg_percent)
    ``{

	// y2debug( "CyclicUpdateCallback: pkg_name: %1 pkg_description: %2 pkg_percent: %3", pkg_name, pkg_description, pkg_percent );

	SlideShow::SlideDisplayProgress ( pkg_percent );

	return nil;
    };



   /**
     * CallbackDisplayError
     **/

    global define symbol CallbackDisplayError (string pkg_name)
    ``{
	y2milestone ( "The RPM packager returned an error for package: %1", pkg_name );

	// add package to list error_packages (module "PackageInstallation")
	error_packages = add( error_packages, pkg_name );

	if ( !deleting )
	{
	    any answer = `no_log;
	    string message = sformat( _("Package %1 returned an error.\nDo you want to see the log file?"),
					  pkg_name );
	    if ( UI::AnyQuestionPopup( NoHeadline(),
					   message,
					   YesButtonLabel(),
					   NoButtonLabel(),
					   `focus_no) )
	    {
		answer = `yes_short;
	    }

	    textdomain "general";	// what's that good for?

	    while ( answer != `no_log )
	    {
		string text = "";

		if ( answer == `yes_short )
		{
		    text = SCR::Read (.target.string, Installation::destdir + "/var/log/YaST2/y2logRPMShort");
		}
		if ( answer == `yes_long )
		{
		    text = SCR::Read (.target.string, Installation::destdir + "/var/log/YaST2/y2logRPM");
		}

		answer = UI::DisplayLogFile( text, answer );
	    }

	    textdomain "packager";
	}
    };



    /**
     * Wrapper function for ChangeMedium: Update statistics along with the
     * (optional) real Medium change popup.
     * @param cd_no Number of the Medium to request (from 1 on)
     * @param show_popup false: no popup, only check for presence of this Medium
     * @return boolean - passed trough from ChangeMedium (true: OK, false: abort)
     **/
    global define boolean ChangeMediumWrapper( integer cd_no, boolean show_popup )
    ``{
	// y2debug( "Requesting Medium #%1", cd_no );

	boolean ret = true;

	if ( ! Mode::test )
	{
	    ret = MediaUI::ChangeMedium( cd_no, show_popup );
	}
	else // Mode::test - do some fake
	{
	    ret = true;

	    if ( show_popup )
	    {
		// No translation, this is for testing only
		ret = UI::ContinueCancelPopup( sformat( "%1 #%2 requested (test mode).\n\n"			+
							"You don't really need a %1 - this is just a fake.\n"	+
							"You can safely just hit 'Continue'.\n"
							, InstMedia::medianame, cd_no ) );
	    }
	}

	if ( ret )
	{
	    SlideShow::SetCurrentCdNo( cd_no );
	}
	SlideShow::UpdateAllCdProgress( false );
	// y2debug( "ChangeMediumWrapper returning with %1", ret );

	return ret;
    };

}
