/**
 * Module:		InstURL.ycp
 *
 * Authors:		Klaus Kaempf (kkaempf@suse.de)
 *
 * Purpose:		Convert /etc/install.inf data to URL
 *
 *
 * $Id$
 */

{
    module "InstURL";

    textdomain "packager";

    global define string installInf2Url (string extra_dir )
    ``{
	string options = "";
	boolean is_network = true;

	string instmode = SCR::Read (.etc.install_inf.InstMode);	// mode
	if (instmode == nil)						// defaults to "CD"
	    instmode = "cd";

	if ((instmode == "cd")					// CD or DVD
	    || (instmode == "dvd"))
	{
	    is_network = false;
	    list devicelist = SCR::Read(.probe.cdrom);
	    foreach (`device, devicelist,
	    ``{
		string devname = device["dev_name"]:"";
		if (instmode == "dvd")			// filter out cd drives if dvd is wanted
		{
		    if (!issubstring (device["cdtype"]:"", "dvd"))
			devname = "";
		}

		if (devname != "")
		{
		    if (options != "") options = options + ",";
		    options = options + devname;
		}
	    });
	    if (options != "")
	    {
		options = "devices=" + options;
	    }
	}
	else if (instmode == "hd")						// Harddisk
	{
	    is_network = false;
	    options = "device=/dev/" + SCR::Read (.etc.install_inf.Partition) + ";filesystem=auto";
	}

	string url = instmode + "://";

	if (is_network)
	{
	string username = SCR::Read (.etc.install_inf.Username);
	if ((username != nil) && (username != ""))
	{
	    url = url + username;
	    string password = SCR::Read (.etc.install_inf.Password);
	    if ((password != nil) && (password != ""))
	    {
		url = url + ":";
		url = url + password;
	    }
	    url = url + "@";
	}
	string server = SCR::Read (.etc.install_inf.Server);
	if ((server != nil) && (server != ""))
	{
	    url = url + server;
	}
	} // is_network

	string serverdir = SCR::Read (.etc.install_inf.Serverdir);
	if (((instmode == "hd") || is_network)				// if serverdir needed
	    && ((serverdir != nil) && (serverdir != "")))		// and is valid
	{
	    // for smb mounts it is usual to not have a leading slash
	    if (substring (serverdir, 0, 1) != "/")
		serverdir = "/" + serverdir;

	    url = url + serverdir;
	}
	else
	{
	    url = url + "/";
	}

	if (extra_dir != "")
	{
	    url = url + "/" + extra_dir;
	    y2milestone ("extra_dir url '%1'", url);
	}

	if (is_network)
	{
	string proxy = SCR::Read (.etc.install_inf.Proxy);
	if ((proxy != nil) && (proxy != ""))
	{
	    url = url + ";proxy=" + proxy;
	}
	string proxyport = SCR::Read (.etc.install_inf.ProxyPort);
	if ((proxyport != nil) && (proxyport != ""))
	{
	    url = url + ";proxyport=" + proxyport;
	}
	string proxyproto = SCR::Read (.etc.install_inf.ProxyProto);
	if ((proxyproto != nil) && (proxyproto != ""))
	{
	    url = url + ";proxyproto=" + proxyproto;
	}
	string proxyuser = SCR::Read (.etc.install_inf.ProxyUser);
	if ((proxyuser != nil) && (proxyuser != ""))
	{
	    url = url + ";proxyuser=" + proxyuser;
	}
	string proxypassword = SCR::Read (.etc.install_inf.ProxyPassword);
	if ((proxypassword != nil) && (proxypassword != ""))
	{
	    url = url + ";proxypassword=" + proxypassword;
	}
	} // is_network

	if (options != "")
	{
	    url = url + ";" + options;
	    y2milestone ("options %1", options);
	}
	y2milestone ("URL %1", url);
	return url;
    }

}
