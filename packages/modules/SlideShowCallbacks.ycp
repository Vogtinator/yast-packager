/**
 * Module: 		SlideShowCallbacks.ycp
 *
 * Authors:		Gabriele Strattner <gs@suse.de>
 *			Klaus Kaempf <kkaempf@suse.de>
 *
 * Purpose: 		provides the Callbacks for SlideShow
 *
 * $Id$
 */

{
    module "SlideShowCallbacks";

    import "PackageCallbacks";

    textdomain "packager";

    boolean shutup = false;			// show the disk space warning popup only once

    boolean _remote_provide = false;

   /** at start of file providal
    *
    */
    global define void StartProvide (string name, integer archivesize, boolean remote)
    ``{
	if (remote)
	{
	    SlideShow::SlideProvideStart (name);
	    _remote_provide = true;
	}
	PackageCallbacks::_provide_name = name;
	return;
   }


   /** during file providal
    *
    */
   global define void ProgressProvide (integer percent)
   ``{
	if (_remote_provide)
	{
	    SlideShow::SlideDisplayProgress ( percent );
	}
	return;
   }


   /** during file providal
    *
    */
   global define string DoneProvide (integer error, string reason)
   ``{
	if (_remote_provide)
	{
	    SlideShow::SlideDisplayProgress ( 100 );
	    _remote_provide = false;
	}
	if (error != 0)
	{
	    return PackageCallbacks::DoneProvide (error, reason);
	}

	return "";
   }


   /** at start of package install
    *
    */
    global define boolean StartPackage (string name, string summary, integer installsize, boolean is_delete)
    ``{
	PackageCallbacks::_package_name = name;
	return DisplayStartInstall ( name, summary, installsize, Pkg::TargetUsed(Installation::destdir), Pkg::TargetCapacity(Installation::destdir), is_delete);
    }

   /** at end of install
    * just to override the PackageCallbacks default (which does a 'CloseDialog' :-})
    */
   global define string DonePackage (integer error, string reason)
   ``{
	SlideShow::SlideDisplayProgress (100);
	if (error != 0)
	{
	    return PackageCallbacks::DonePackage (error, reason);
	}
	return "";
   }


   //--------------------------------------------------------------------------
   // slide show
   /**
     * Callback that will be called by the packager for each RPM as it is being installed or deleted.
     * Note: The packager doesn't call this directly - the corresponding wrapper callbacks do
     * and pass the "deleting" flag as appropriate.
     *
     * return true: go on with installation
     *        false: abort installation
     **/
    global define boolean DisplayStartInstall ( string  pkg_name,
					    string  pkg_description,
					    integer pkg_size,
					    integer disk_usage,
					    integer disk_capacity,
					    boolean deleting )
    ``{

	// y2debug( "CyclicUpdateCallback: pkg_name: %1 pkg_description: %2 pkg_percent: %3", pkg_name, pkg_description, pkg_percent );

	SlideShow::SlideDisplayStart ( pkg_name, pkg_description, pkg_size, deleting );

	integer how_much = (disk_usage * 100) / disk_capacity;

	// warn user about exhausted diskspace during installation (not if deleting packages)
	if (!deleting)
	{
	    if (how_much > 95 && !shutup)
	    {
		boolean cont = UI::AnyQuestionPopup( WarningMsg(),
						     _("The disk space is nearly exhausted.
Continue with the installation?
"),
						     YesButtonLabel(),
						     NoButtonLabel(),
						     `focus_no );

		if (!cont)
		    return false;
		else
		    shutup = true;
	    }
	}

	any button = UI::PollInput();

	// in case of cancel ask user if he really wants to quit installation
	if ( button == `abort )
	{
	    boolean ret = false;

	    if ( Mode::normal )
	    {
		ret = UI::AnyQuestionPopup( NoHeadline(),
					    _("Do you really want\nto quit the installation?"),
					    YesButtonLabel(),
					    NoButtonLabel(),
					    `focus_no );
	    }
	    else if ( Mode::initial )
	    {
		ret = UI::ConfirmAbortPopup( `unusable );
	    }
	    else	// Mode::update, Mode::cont
	    {
		ret = UI::ConfirmAbortPopup( `incomplete );
	    }

	    if ( ret )
		return false;

	}
	else
	{
	    SlideShow::ProcessButtonPress( button );
	}

	return true;
    };


   /**
     * CallbackDisplayProgress percent
     **/

    global define symbol CallbackDisplayProgress(integer pkg_percent)
    ``{

	// y2debug( "CyclicUpdateCallback: pkg_name: %1 pkg_description: %2 pkg_percent: %3", pkg_name, pkg_description, pkg_percent );

	SlideShow::SlideDisplayProgress ( pkg_percent );

	return nil;
    };


    // change of source
    // source: 0 .. n-1
    // media:  1 .. n

    global define void CallbackSourceChange (integer source, integer media)
    ``{
	PackageCallbacks::SourceChange (source, media);		// inform PackageCallbacks about the change
	SlideShow::SetCurrentCdNo (source+1, media);
	SlideShow::SlideDisplayProgress (0);
	SlideShow::UpdateAllCdProgress(false);
	SlideShow::UpdateCurrentCdProgress(); // may or may not be 0 -> recalculate
	return;
    };

    /**
     * constructor
     *
     */

    global define void SlideShowCallbacks()
    ``{
	y2milestone ( "SlideShowCallbacks constructor" );
	Pkg::CallbackStartPackage ("SlideShowCallbacks::StartPackage");
	Pkg::CallbackProgressPackage ("SlideShowCallbacks::CallbackDisplayProgress");
	Pkg::CallbackDonePackage ("SlideShowCallbacks::DonePackage");

	Pkg::CallbackStartProvide ("SlideShowCallbacks::StartProvide");
	Pkg::CallbackProgressProvide ("SlideShowCallbacks::ProgressProvide");
	Pkg::CallbackDoneProvide ("SlideShowCallbacks::DoneProvide");

	Pkg::CallbackSourceChange ("SlideShowCallbacks::CallbackSourceChange");
    }

}
