/**
 * Module: 		PackageInstallation.ycp
 *
 * Authors:		Gabriele Strattner <gs@suse.de>
 *
 * Purpose:
 *
 *
 * $Id$
 */

{

    module "PackageInstallation";

    import "Arch";
    import "AutoInstall";
    import "Report";
    import "Mode";
    import "Installation";
    import "Version";
    import "SpaceCalculation";
    import "InstMedia";
    import "MediaUI";
    import "Packages";
    import "PackageCallbacks";
    import "SlideShow";

    import "Wizard";

    include "showlog_defines.ycp";
    include "ui/common_popups.ycp";

    textdomain "packager";

    boolean shutup = false;			// show the disk space warning popup only once


    /**
     * Constructor()
     * @return void;
     *
     */
    global define void PackageInstallation() ``{
	return;
    }


    /**
     *  commitPackages marked for deletion or installation
     *	Return: [ list errors, list remaining ]
     *
     **/
    global define list CommitPackages (integer media_number,
					integer packages_installed)
    ``{
	if ( Mode::test )
	{
	    FakePackager( [],
			"suse",
			false );		// not deleting packages
	    return [];
	}
	// install packages from this media

	y2milestone ("Pkg::SetProgressCallback");
	Pkg::CallbackStartProvide ("PackageCallbacks::StartProvide");
	Pkg::CallbackStartInstall ("PackageCallbacks::StartInstall");
	Pkg::CallbackProgress ("PackageCallbacks::CallbackDisplayProgress");
	Pkg::CallbackDoneInstall ("PackageCallbacks::DoneInstall");

	foreach (`src, Pkg::SourceGetCurrent(),
	``{
	    Pkg::CallbackMediaChange (src, "PackageCallbacks::MediaChange");
	    Pkg::CallbackMediaError (src, "PackageCallbacks::MediaError");
	});

	SlideShow::InitPkgData();
	SlideShow::UpdateAllCdProgress (false);
	SlideShow::StartTimer();

	list commit_result = Pkg::PkgCommit (media_number);

	SlideShow::StopTimer();

	if (commit_result == nil)
	{
	    y2error ("Bad media number %1", media_number);
	    return [];
	}

	return commit_result;
    };


    //
    // Fake progress bars for Mode::test
    //
    global define symbol FakePackager(  list packages, string inst_source, boolean deleting )
    ``{
	integer disk_usage = 20;
	integer disk_capacity = 10000;
	any ret = nil;
	integer number = 0;

	y2debug( "FakePackager - handling %1 packages", size( packages ) );

	foreach( `pac, packages, ``{
	    //y2debug( "Fake installing %1 from %2", select(pac,0), inst_source );

	    string pkg_name	= pac[0]:"";

	    integer pkg_size 	= SlideShow::GetPackageSize( select(pac, 0, "") );
	    integer bytes_installed = 0;

	    if ( pkg_size < 0 )
	    {
		// pkginfo doesn't know anything about the kernel RPM, so its
		// size can't be obtained, e.g. pkg_size is -1. To make up for
		// this, let's assume a negative starting size to keep things
		// going for a while (this is test_mode only, anyway).
		bytes_installed = -857 * 1024;
	    }

	    while  ( bytes_installed < pkg_size && ret != `cancel && ret != `diskfull )
	    {
		integer percent = ( 100 * bytes_installed ) / pkg_size;
		if ( deleting )
		{
		    ret = UI::CyclicDeletePkgCallback( pkg_name,
						       pac[1]:"",
						       percent,
						       number,
						       disk_usage,
						       disk_capacity,
						       false );	// error
		}
		else
		{
		    ret = UI::CyclicInstallPkgCallback( pkg_name,
							pac[1]:"",
							percent,
							number,
							disk_usage,
							disk_capacity,
							false );	// error
		}
		sleep ( 300 ); // millisec
		bytes_installed = bytes_installed + 300 * 1024;
	    }
	    disk_usage = disk_usage+1;
	    number = number+1;

	} );

	if	( ret == `cancel || ret == `abort )	ret = `cancel;
	else if ( ret == `diskfull )			ret = `diskfull;
	else						ret = `ok;

	y2debug( "FakePackager returning with %1", ret );
	return ret;
    };



}
