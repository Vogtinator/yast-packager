/**
 * Module: 		PackageInstallation.ycp
 *
 * Authors:		Gabriele Strattner <gs@suse.de>
 *
 * Purpose:
 *
 *
 * $Id$
 */

{

    module "PackageInstallation";

    import "Arch";
    import "AutoInstall";
    import "Report";
    import "Mode";
    import "Installation";
    import "Version";
    import "SpaceCalculation";
    import "InstMedia";
    import "MediaUI";
    import "Packages";
    import "SlideShow";

    import "Wizard";

    include "showlog_defines.ycp";
    include "ui/common_popups.ycp";

    include "packages/installationCallback.ycp";

    textdomain "packager";

    boolean shutup = false;			// show the disk space warning popup only once


    /**
     * media change callback
     *
     */
    global define integer changeMedium (integer error, integer current, integer wanted)
    ``{
	y2milestone ("change (err %1, now %2, want %3)", error, current, wanted);
	string message = sformat ("Please insert media #%1", wanted);
	string info = sformat ("Found media #%1 (code %2)", current, error);
	any ret = MediaUI::ChangeMediumPopup (message, info);
	if (ret == `continue)
	    return 0;
	return -1;
    }

    /**
     * media open/attach callback
     *
     */
    global define integer errorMedium (string message)
    ``{
	y2milestone ("errorMedium(%1)", message);
	UI::MessagePopup ("Error accessing media:\n"+message);
	return 0;
    }


    /**
     * Constructor()
     * @return void;
     *
     */
    global define void PackageInstallation() ``{
	return;
    }


    /**
     *  commitPackages marked for deletion or installation
     *	Return: [ list errors, list remaining ]
     *
     **/
    global define list CommitPackages (integer media_number,
					integer packages_installed)
    ``{
	if ( Mode::test )
	{
	    FakePackager( [],
			"suse",
			false );		// not deleting packages
	    return [];
	}
	// install packages from this media

	y2milestone ("Pkg::SetProgressCallback");
	Pkg::SetProgressCallback ("CallbackDisplayProgress");

	Pkg::SourceSetMediaChangeCallback (Packages::theSource, "changeMedium");
	Pkg::SourceSetMediaErrorCallback (Packages::theSource, "errorMedium");
	
	SlideShow::InitPkgData();
	SlideShow::UpdateAllCdProgress (false);
	SlideShow::StartTimer();

	list commit_result = Pkg::commitPackages (media_number);

	SlideShow::StopTimer();

	if (commit_result == nil)
	{
	    y2error ("Bad media number %1", media_number);
	    return [];
	}

	return commit_result;
    };


    /**
     * Wrapper function for ChangeMedium: Update statistics along with the
     * (optional) real Medium change popup.
     * @param cd_no Number of the Medium to request (from 1 on)
     * @param show_popup false: no popup, only check for presence of this Medium
     * @return boolean - passed trough from ChangeMedium (true: OK, false: abort)
     **/
    global define boolean ChangeMediumWrapper( integer cd_no, boolean show_popup )
    ``{
	// y2debug( "Requesting Medium #%1", cd_no );

	boolean ret = true;

	if ( ! Mode::test )
	{
	    ret = MediaUI::ChangeMedium( cd_no, show_popup );
	}
	else // Mode::test - do some fake
	{
	    ret = true;

	    if ( show_popup )
	    {
		// No translation, this is for testing only
		ret = UI::ContinueCancelPopup( sformat( "%1 #%2 requested (test mode).\n\n"			+
							"You don't really need a %1 - this is just a fake.\n"	+
							"You can safely just hit 'Continue'.\n"
							, InstMedia::medianame, cd_no ) );
	    }
	}

	if ( ret )
	{
	    SlideShow::SetCurrentCdNo( cd_no );
	}
	SlideShow::UpdateAllCdProgress( false );
	// y2debug( "ChangeMediumWrapper returning with %1", ret );

	return ret;
    };



    //
    // Fake progress bars for Mode::test
    //
    global define symbol FakePackager(  list packages, string inst_source, boolean deleting )
    ``{
	integer disk_usage = 20;
	integer disk_capacity = 10000;
	any ret = nil;
	integer number = 0;

	y2debug( "FakePackager - handling %1 packages", size( packages ) );

	foreach( `pac, packages, ``{
	    //y2debug( "Fake installing %1 from %2", select(pac,0), inst_source );

	    string pkg_name	= pac[0]:"";

	    integer pkg_size 	= SlideShow::GetPackageSize( select(pac, 0, "") );
	    integer bytes_installed = 0;

	    if ( pkg_size < 0 )
	    {
		// pkginfo doesn't know anything about the kernel RPM, so its
		// size can't be obtained, e.g. pkg_size is -1. To make up for
		// this, let's assume a negative starting size to keep things
		// going for a while (this is test_mode only, anyway).
		bytes_installed = -857 * 1024;
	    }

	    while  ( bytes_installed < pkg_size && ret != `cancel && ret != `diskfull )
	    {
		integer percent = ( 100 * bytes_installed ) / pkg_size;
		if ( deleting )
		{
		    ret = UI::CyclicDeletePkgCallback( pkg_name,
						       pac[1]:"",
						       percent,
						       number,
						       disk_usage,
						       disk_capacity,
						       false );	// error
		}
		else
		{
		    ret = UI::CyclicInstallPkgCallback( pkg_name,
							pac[1]:"",
							percent,
							number,
							disk_usage,
							disk_capacity,
							false );	// error
		}
		sleep ( 300 ); // millisec
		bytes_installed = bytes_installed + 300 * 1024;
	    }
	    disk_usage = disk_usage+1;
	    number = number+1;

	} );

	if	( ret == `cancel || ret == `abort )	ret = `cancel;
	else if ( ret == `diskfull )			ret = `diskfull;
	else						ret = `ok;

	y2debug( "FakePackager returning with %1", ret );
	return ret;
    };



}
