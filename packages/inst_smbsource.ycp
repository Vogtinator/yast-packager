/**
 *
 * $Id$
 *
 * Module:	inst_smbsource.ycp
 *
 * Author:	Stefan Hundhammer <sh@suse.de>
 *
 * Purpose:	Samba-Mount
 *		FIXME: Better explanation
 *
 *
 */
{
    /*
     * FIXME
     * FIXME
     * FIXME
     *
     * Currently, this works as a standalone module only!
     * invoke with
     *
     *		y2bignfat inst_smbmount.ycp qt -T -geometry 640x480 -style=platinum -font '-gnu-unifont-medium-r-normal--16-160-75-75-p-80-iso10646-1'
     *
     * or simply
     *
     *		y2bignfat inst_smbmount.ycp qt
     *
     * FIXME
     * FIXME
     * FIXME
     */


    textdomain "packager";

    import "Arch";
    import "Installation";
    import "InstMedia";
    import "MediaUI";
    import "Wizard";

    include "ui/common_popups.ycp";

    // retrieve current settings

    InstMedia::initializeInstMedia($[]);

    Wizard::CreateDialog ();

    UI( ``{
	/**
	 * Set a widget's `Value property
	 */
	global define setValue( any id, any new_value ) ``{
	    ChangeWidget( id, `Value, new_value );
	};


	/**
	 * Retrieve a widget's `Value property
	 */
	global define getValue( any id ) ``{
	    return QueryWidget( id, `Value );
	};


	/**
	 * enable / disable user authentification fields
	 */
	global define setUserFieldEnabling( boolean enabled ) ``{
	    ChangeWidget(`id(`user_name 	), `Enabled, enabled );
	    ChangeWidget(`id(`password  	), `Enabled, enabled );
	    ChangeWidget(`id(`activate_workgroup), `Enabled, enabled );
	    ChangeWidget(`id(`activate_domain	), `Enabled, enabled );

	    if ( enabled )
	    {
		if ( getValue( `id(`activate_workgroup ) ) )
		{
		    ChangeWidget(`id(`workgroup 	), `Enabled, true  );
		    ChangeWidget(`id(`domain		), `Enabled, false );
		}
		else
		{
		    ChangeWidget(`id(`workgroup 	), `Enabled, false );
		    ChangeWidget(`id(`domain		), `Enabled, true  );
		}
	    }
	    else	// ! enabled
	    {
		ChangeWidget(`id(`workgroup 	), `Enabled, enabled );
		ChangeWidget(`id(`domain	), `Enabled, enabled );
	    }
	};


	// Wizard::CreateDialog();

	// help text
	string help_text = _( "<p>
Enter the <b>server</b> name or IP address and the <b>share</b> name (the name
of the device or path) as exported by this server.
</p>");
       // help text, continued
	help_text = help_text + _( "<p>
Please note: if you do install from SuSE CDROMs the share name must
end with '<b>CDROM</b>'
</p>");
	// help text, continued
	help_text = help_text + _( "<p>
You may be able to simply use a standard <b>guest login</b>, depending on the
configuration of the server.
</p>");

	// help text, continued
	help_text = help_text + _( "<p>
If the server doesn't support this, enter a valid <b>user name</b> along with
the corresponding <b>password</b> and either the <b>workgroup</b> or the user
<b>domain</b> (don't confuse this with Linux/Unix network domains!).
</p>");

	term contents =
	    `VBox(
		  `Frame(
			 // Frame title for frame surrounding server name/IP and share name input fields
			 _( "Location" ),
			 `VBox(
			       `VSpacing( 0.3 ),
			       `HBox(
				     `HSpacing(),

				     // input field for server name or IP
				     `TextEntry(`id(`server ), _( "&Server:" ), WFM::InstMedia::net_server ),
				     `HSpacing(),

				     // input field for the SMB share name
				     `TextEntry(`id(`share ), _( "S&hare:" ), WFM::InstMedia::net_dir),
				     `HSpacing()
				     ),
			       `VSpacing( 0.5 )
			       )
			 ),
		  `VSpacing(),
		  `Frame(
			 // Frame title for authentification data (user name, password etc. fields)
			 _( "Authentification" ),
			  `HBox(
				`HSpacing(),
				`VBox(
				      `VSpacing( 0.5 ),
				      // check box for guest login
				      `Left( `CheckBox(`id(`use_guest_login ), `opt(`notify ),  _( "Use &guest login"),  (WFM::InstMedia::net_username == "") ) ),

				      `VBox(
					    `HBox(
						  // input field for user name
						  `TextEntry(`id(`user_name ), _( "&User name:" ), WFM::InstMedia::net_username ),
						  `HSpacing(),

						  // input field for user password
						  `Password (`id(`password ), _( "&Password:" ), WFM::InstMedia::net_password )
						  ),
					    `VSpacing( 0.9 ),
					    `RadioButtonGroup(
							      `HBox(
								    `VBox(
									  // Radio button to activate input field for workgroup
									  `Left(`RadioButton(`id(`activate_workgroup ), `opt(`notify), _( "&Workgroup:" ), WFM::InstMedia::smb_as_workgroup) ),
									  `TextEntry(`id(`workgroup ), (WFM::InstMedia::smb_as_workgroup?WFM::InstMedia::smb_workdomain:""))
									  ),
								    `HSpacing(),
								    `VBox(
									  // Radio button to activate input field for domain
									  `Left(`RadioButton(`id(`activate_domain ), `opt(`notify ), _( "&Domain:" ), !WFM::InstMedia::smb_as_workgroup) ),
									  `TextEntry(`id(`domain), (WFM::InstMedia::smb_as_workgroup?"":WFM::InstMedia::smb_workdomain) )
									  )
								    )
							      )
					    ),
				      `VSpacing( 0.5 )
				      ),
				`HSpacing()
				)
			  )
		  );


	Wizard::SetContents(
			  // Headline for Samba mount dialog
			  _("Samba mount"),
			  contents,
			  help_text,
			  false,	// have_back_button
			  true		// have_next_button
			  );

	setUserFieldEnabling( ! getValue( `id(`use_guest_login ) ) );
    });

    symbol button = `empty;

    repeat
    {
	button = UI::UserInput();

	if ( button == `abort && UI::ReallyAbortPopup( false ) )
	{
	    return `abort;
	}
	else if ( button == `use_guest_login )
	{
	    UI::setUserFieldEnabling( ! UI::getValue( `id(`use_guest_login ) ) );
	}
	else if ( button == `activate_workgroup )
	{
	    UI::ChangeWidget(`id(`workgroup ), `Enabled, true  );
	    UI::ChangeWidget(`id(`workgroup ), `Value, InstMedia::smb_workdomain);
	    UI::ChangeWidget(`id(`domain    ), `Enabled, false );
	    UI::ChangeWidget(`id(`domain ), `Value, "");
	    UI::SetFocus( `id(`workgroup) );
	}
	else if ( button == `activate_domain )
	{
	    UI::ChangeWidget(`id(`domain    ), `Enabled, true  );
	    UI::ChangeWidget(`id(`domain), `Value, InstMedia::smb_workdomain);
	    UI::ChangeWidget(`id(`workgroup ), `Enabled, false );
	    UI::ChangeWidget(`id(`workgroup  ), `Value, "");
	    UI::SetFocus( `id(`domain ) );
	}
	else if ( button == `next )
	{
	    map instMap = $[ "instmode" : "smb" ];

	    // Retrieve the values from the widgets

	    change (instMap, "server",		UI::getValue (`id(`server)));
	    change (instMap, "serverdir",	UI::getValue (`id(`share)));

	    boolean use_guest_login = UI::getValue(`id(`use_guest_login));
	    if ( use_guest_login )
	    {
		change (instMap, "username", "");
	    }
	    else
	    {
		change (instMap, "username",	UI::getValue(`id(`user_name)));
		change (instMap, "password",	UI::getValue(`id(`password)));
	    }
	    if (UI::getValue(`id(`activate_workgroup)))
	    {
		change (instMap, "asworkgroup", true);
		change (instMap, "workdomain",	UI::getValue(`id(`workgroup)));
	    }
	    else
	    {
		change (instMap, "asworkgroup", false);
		change (instMap, "workdomain",	UI::getValue(`id(`domain)));
	    }

	    button = `error;	// Prevent falling out of the loop in any error case
	    if ( lookup (instMap, "server", "") == "" )
	    {
		// Error popup
		UI::ErrorPopup( _( "Please enter the name or IP address of the server." ));
		UI::SetFocus( `id(`server ));
	    }
	    else if ( lookup (instMap, "serverdir", "") == "" )
	    {
		// Error popup
		UI::ErrorPopup( _( "Please enter the name of the share to use." ));
		UI::SetFocus( `id(`share ));
	    }
	    else if (! use_guest_login
		     && lookup (instMap, "username", "") == "" )
	    {
		// Error popup - translators notice:
		// reference to "use guest login" check box in this dialog,
		// please translate accordingly!
		UI::ErrorPopup( _( "Please enter a user name\nor check \"use guest login\"." ));
		UI::SetFocus( `id(`user_name ));
	    }
	    else if ( ! use_guest_login
		     && lookup (instMap, "password", "") == "" )
	    {
		// Error popup - translators notice:
		// reference to "use guest login" check box in this dialog,
		// please translate accordingly!
		UI::ErrorPopup( _( "Please enter the password for this user\nor check \"use guest login\"." ));
		UI::SetFocus( `id(`password));
	    }
	    else // All required fields OK
	    {

		// Write data to user_settings

		InstMedia::initializeInstMedia (instMap);

		// mount the source
		boolean mount_ok = MediaUI::ChangeMedium( 1, true );

		if ( mount_ok )
		{
		    InstMedia::WriteInstallMap();
		    button = `next;
		}
		else
		{
		    button = `again;
		}

	    }
	}

    } until ( button == `next || button == `back || button == `abort );

    return `next;
}
