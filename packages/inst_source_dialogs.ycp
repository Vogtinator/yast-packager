/**
 * Module: 		inst_source.ycp
 *
 * Authors:		Klaus Kaempf <kkaempf@suse.de>
 *			Gabriele Strattner <gs@suse.de>
 *			Stefan Schubert <schubi@suse.de>
 *                      Cornelius Schumacher <cschum@suse.de>
 *
 * Purpose:
 * Displays possibilities to install from NFS, CD or partion
 * Do the "mount" for testing the input.
 *
 * $Id$
 */

{
    textdomain "packager";

    /**
        Return an HBox with ok and cancel buttons for use by other dialogs.
        @return An HBox term for use in a CreateDialog call.
    */
    global define term dialogButtons() ``{
        return
            `HBox(
                `PushButton( `id( `ok ), `opt( `default ), OKButtonLabel() ),
                `HStretch(),
                `PushButton( `id( `cancel ), CancelButtonLabel() )
            );
    }

    /**
        Open a dialog for editing of authentification information (basically a
        username and a password.
    */
    global define void editAuthentification() ``{
        UI::OpenDialog(
            `VBox(
                `Label( _("Authentification") ),

                `RadioButtonGroup(`id(`rb), 
                    `VBox(
                        `Left( `RadioButton( `id( `anonymous ), _("Anonymous") ) ),
                        `Left( `RadioButton( `id( `account ), _("Account") ) ),
                        `HBox(
                            `HSpacing( 3 ),
                            `TextEntry( `id( `username ), _("Username") ),
                            `HSpacing( 2 )
                        ),
                        `HBox(
                            `HSpacing( 3 ),
                            `TextEntry( `id( `password ), _("Password") ),
                            `HSpacing( 2 )
                        ),
                        dialogButtons()
                    )
                )
            )
        );

        repeat
        {
            symbol authinput = UI::UserInput();
            y2debug( "Auth Input: %1", authinput );

            if ( authinput == `ok )
            {
                y2debug( "ok clicked" );
            }
    
        } until ( authinput == `cancel || authinput == `ok );
        
        UI::CloseDialog();
    }

    /**
        Open a dialog for editing of FTP server information.
    */
    global define void editFtp() ``{
        UI::OpenDialog(
            `VBox(
                `Label( _("FTP Server and Directory") ),
                `TextEntry( `id( `server ), _("Server Name") ),
                `TextEntry( `id( `dir ), _("Directory on Server") ),
                `HBox(
                    `Label( _("Authentification:") ),
                    `Label( `id( `auth ), _("Anonymous") ),
                    `PushButton( `id( `auth_button ), _("Edit...") )
                ),
                dialogButtons()
            )
        );

        repeat
        {
            symbol input = UI::UserInput();
            y2debug( "Input: %1", input );

            if ( input == `auth_button )
            {
                editAuthentification();
            }
            else if ( input == `ok )
            {
                y2debug( "ok clicked" );
            }
    
        } until ( input == `cancel || input == `ok );
      
        UI::CloseDialog();
    }

    /**
        Get a nfs url.
    */    
    global define void getNfsUrl() ``{
        UI::OpenDialog(
            `VBox(
                `Label( _("NFS Server and Directory") ),
                `TextEntry( `id( `server ), _("&Server Name") ),
                `TextEntry( `id( `dir ), _("&Directory on Server") ),
//                `TextEntry( `id( `mount ), _("&Mount options") ),
                dialogButtons()
            )
        );

        string url = "";

        repeat
        {
            symbol input = UI::UserInput();
            y2debug( "Input: %1", input );

            if ( input == `ok )
            {
                string server = UI::QueryWidget( `id( `server ), `Value );
                string dir = UI::QueryWidget( `id( `dir ), `Value );
                string options = UI::QueryWidget( `id( `mount ), `Value );
                
                url = "nfs://" + server + "/" + dir;
            }
    
        } until ( input == `cancel || input == `ok );
      
        UI::CloseDialog();
    
        return url;
    }

    /**
        Get url for a cd or dvd.
    */
    global define void getCdUrl() ``{
        UI::OpenDialog(
            `VBox(
                `Label( _("CD installation") ),
                `RadioButtonGroup( `id( `device ),
                    `VBox(
                        `Left( `RadioButton( `id( `cd0 ), "/dev/cdrom", true ) ),
//                        `Left( `RadioButton( `id( `cd1 ), "/dev/cdrom1" ) ),
                        `Left( `RadioButton( `id( `dvd ), "/dev/dvd" ) )
                    )
                ),
                dialogButtons()
            )
        );

        string url = "";

        repeat
        {
            symbol input = UI::UserInput();
            y2debug( "Input: %1", input );

            if ( input == `ok )
            {
                symbol device = UI::QueryWidget( `id( `device ), `CurrentButton );
                if ( device == `cd0 )
                {
                    url = "cd:///";
                }
                else if ( device == `dvd )
                {
                    url = "dvd:///";
                }
            }
    
        } until ( input == `cancel || input == `ok );
      
        UI::CloseDialog();
        
        return url;
    }

    /**
        Get a URL for a ftp, http or samba server, optionally inclduing
        user/password information.

        @param protocol type of server, can be `ftp, `http or `samba.
    */
    global define void getServerUrl( symbol protocol ) ``{
        UI::OpenDialog( `opt( `decorated ),
            `VBox(
                `Label( _("Server and Directory") ),
                `HBox(
                    `HSpacing( 0.5 ),
                    `Frame( _("P&rotocol"),
                        `RadioButtonGroup( `id( `rb_type ),
                            `HBox(
                                `HStretch(),
                                `RadioButton( `id( `ftp ), _("&FTP") ),
                                `HStretch(),
                                `RadioButton( `id( `http ), _("H&TTP") ),
                                `HStretch(),
                                `RadioButton( `id( `samba ), _("&Samba") ),
                                `HStretch()
                            )
                        )
                    ),
                    `HSpacing( 0.5 )
                ),
                `TextEntry( `id( `server ), _("Server &Name") ),
                `TextEntry( `id( `dir ), _("&Directory on Server") ),
                `HBox(
                    `HSpacing( 0.5 ),
                    `Frame( _("Au&thentification"),
                        `VBox(
                            `Left( `CheckBox( `id( `anonymous ), `opt( `notify ), _("&Anonymous"), true ) ),
                            `HBox(
                                `TextEntry( `id( `username ), _("&Username") )
                            ),
                            `HBox(
                                `Password( `id( `password ), _("&Password") )
                            )
                        )
                    ),
                    `HSpacing( 0.5 )
                ),
                dialogButtons()
            )
        );

        UI::ChangeWidget( `id( `rb_type ), `CurrentButton, protocol );

        string url = "";

        repeat
        {
            boolean anonymous = UI::QueryWidget( `id( `anonymous ), `Value );
            UI::ChangeWidget( `id( `username ), `Enabled, !anonymous );
            UI::ChangeWidget( `id( `password ), `Enabled, !anonymous );
        
            symbol input = UI::UserInput();
            y2debug( "Input: %1", input );

            if ( input == `ok )
            {
                url = "";
                symbol type = UI::QueryWidget( `id( `rb_type), `CurrentButton );
                if ( type == `ftp ) {
                    typestr = "ftp";
                    url = "ftp://";
                } else if ( type == `http ) {
                    typestr = "http";
                    url = "http://";
                } else if ( type == `samba ) {
                    typestr = "samba";
                    url = "smb://";
                }

                if ( !anonymous )
                {
                    string user = UI::QueryWidget( `id( `username ), `Value );
                    string password = UI::QueryWidget( `id( `password ), `Value );
    
                    if ( size( user ) != 0 ) {
                        url = url + user;
                        if ( size( password ) != 0 ) {
                            url = url + ":" + password;
                        }
                        url = url + "@";
                    }
                }
                    
                string server = UI::QueryWidget( `id( `server ), `Value );
                string directory = UI::QueryWidget( `id( `dir ), `Value );

                url = url + server + "/" + directory;

                    
            }
        } until ( input == `cancel || input == `ok );
      
        UI::CloseDialog();

        return url;
    }

    /**
        Let the user put in a directory url.

        @param default  initial default
        @return directory url on success, empty string when the user canceled the dialog.
    */
    global define string getDirectoryUrl( string default ) ``{
        UI::OpenDialog(
            `VBox(
                `Label( _("Local directory") ),
                `HBox(
                    `TextEntry( `id( `dir ), _("&Directory path") ),
                    `PushButton( `id( `browse ), _("&Browse...") )
                ),
                dialogButtons()
            )
        );

        UI::ChangeWidget( `id( `dir ), `Value, url );

        repeat
        {
            symbol input = UI::UserInput();
            y2debug( "Input: %1", input );

            if ( input == `browse )
            {
                string result = PopupDir( "/tmp" );
                y2debug("file popup result: %1",result);
                if ( result != "" )
                {
                    UI::ChangeWidget( `id( `dir ), `Value, result );
                }
            }
            else if ( input == `ok )
            {
                y2warning("ok clicked");
            
                url = UI::QueryWidget( `id( `dir ), `Value );

                url = "dir://" + url;

                Pkg::SourceCreate( url );
            }
            else if ( input == `cancel )
            {
                url = "";
            }
    
        } until ( input == `cancel || input == `ok );
      
        UI::CloseDialog();
    
        return url;
    }
    
    global define string getUrl( string default ) ``{
        UI::OpenDialog(
            `VBox(
                `Label( _("Select Type of URL:") ),
                `RadioButtonGroup( `id(`url_type),
                    `VBox(
                        `Left( `RadioButton( `id( `dir ), "Directory", true ) ),
                        `Left( `RadioButton( `id( `ftp ), "FTP" ) ),
                        `Left( `RadioButton( `id( `http ), "HTTP" ) ),
                        `Left( `RadioButton( `id( `samba ), "Samba" ) ),
                        `Left( `RadioButton( `id( `nfs ), "NFS" ) ),
                        `Left( `RadioButton( `id( `cd ), "CD" ) ),
                        `Left( `RadioButton( `id( `dvd ), "DVD" ) )
                    )
                ),
                dialogButtons()
            )
        );
        
        string url = "";
        
        symbol input = UI::UserInput();

        if ( input == `ok )
        {
            symbol type = UI::QueryWidget( `id( `url_type), `CurrentButton );

            UI::CloseDialog();

            if ( type == `ftp || type == `http || type == `samba ) {
                url = getServerUrl( type );
            } else if ( type == `dir ) {
                url = getDirectoryUrl( default );
            } else if ( type == `nfs ) {
                url = getNfsUrl();
            } else if ( type == `cd || type == `dvd ) {
                url = getCdUrl();
            }
        } else {
            UI::CloseDialog();
        }
      
        return url;        
    }
}
