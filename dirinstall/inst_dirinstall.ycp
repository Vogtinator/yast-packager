/**
 * Module:	inst_dirinstall.ycp
 *
 * Authors:	Anas Nashif<nashif@suse.de>
 *
 * Purpose:	Install into directory
 *
 * $Id$
 */

{
    textdomain "packager";

    import "DirInstall";
    import "Installation";
    import "Directory";
    import "Popup";
    import "SlideShow";
    import "PackageInstallation";
    import "PackageCallbacks";
    import "Wizard";
    import "Progress";


    if(Pkg::TargetInit (Installation::destdir,true) != true)
    {
        if(Popup::ContinueCancel(_("Initializing the target directory failed")) == false)
        {
            return `abort;
        }
    }
    Wizard::CreateDialog();
    Wizard::SetDesktopIcon("sw_source");

    /**
     *  Write a fake mtab to the target system since some %post scripts might
     *  need it.
     */
    define void fake_mtab () ``{

        string tmpdir = (string) SCR::Read (.target.tmpdir);

        string mtabname = "/etc/mtab";
        string mtab = (string) WFM::Read(.local.string, mtabname);

        SCR::Write(.target.string, tmpdir + "/mtab", mtab);
        SCR::Execute (.target.bash, "/bin/cat " + tmpdir + "/mtab"
                      + " | /bin/sed \"s: " + Installation::destdir
                      + "/: /:\"| /bin/sed \"s: " + Installation::destdir
                      + ": /:\" > " + Installation::destdir + mtabname);

    }
    SCR::Execute(.target.mkdir,Installation::destdir+"/var/log/YaST2");
    SCR::Execute(.target.mkdir,Installation::destdir+"/etc");

    // hack 'pre-req' cyclic dependency between bash, aaa_base, and perl
    SCR::Execute(.target.bash, "/bin/cp /var/adm/fillup-templates/passwd.aaa_base " + Installation::destdir + "/etc/passwd");
    SCR::Execute(.target.bash, "/bin/cp /var/adm/fillup-templates/group.aaa_base " + Installation::destdir + "/etc/group");
    SCR::Execute(.target.bash, "/bin/cp /var/adm/fillup-templates/shadow.aaa_base " + Installation::destdir + "/etc/shadow");

    // fake mtab
    fake_mtab ();




    boolean anyToDelete = Pkg::PkgAnyToDelete();
    SlideShow::SetLanguage (UI::GetLanguage(true));
    SlideShow::InitPkgData();
    SlideShow::OpenSlideShowDialog();

    Pkg::TargetLogfile (Installation::destdir + Directory::logdir + "/y2logRPM");
    list commit_result = PackageInstallation::CommitPackages (0, 0);

    SlideShow::CloseSlideShowDialog();

    list<string> progress_stages =
	[
	 // progress stages
	 _("Finalize system configuration"),
	 // progress stages
	 _("Prepare system for initial boot")
	 ];

    integer progress_length = 2;
    if (DirInstall::makeimage)
    {
        progress_stages=add(progress_stages, _("Create image file"));
        progress_length = progress_length + 1;
    }

    list<string> progress_descriptions =
	[];


    string help_text = _("<p>Please wait while the system is being configured.</p>");

    Progress::New(
            // Headline for last dialog of base installation: Install LILO etc.
            _("Finishing Directory Installation"),
            "",	// Initial progress bar label - not empty (reserve space!)
            progress_length,	// progress bar length
            progress_stages,
            progress_descriptions,
            help_text );




    Progress::NextStage ();
    Progress::Title(_("Configuring installed system"));
    sleep(1000);

    Progress::NextStage ();

    if (DirInstall::makeimage && DirInstall::image_dir != "" && DirInstall::image_name != "")
    {
        Progress::NextStage();
        string cmd =  sformat("cd %1 && tar -zcf %2 . && cd - ", DirInstall::target, DirInstall::image_dir + "/" + DirInstall::image_name );
        y2debug("cmd: %1", cmd);
        Progress::Title(_("Building directory image..."));
        SCR::Execute(.target.bash, cmd);
    }


    Progress::Finish();
    UI::CloseDialog();


    return `next;
}
