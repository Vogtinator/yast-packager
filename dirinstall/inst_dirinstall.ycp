/**
 * Module:	inst_dirinstall.ycp
 *
 * Authors:	Anas Nashif<nashif@suse.de>
 *
 * Purpose:	Install into directory
 *
 * $Id$
 */

{
    textdomain "packager";

    import "DirInstall";
    import "Installation";
    import "Popup";
    import "SlideShow";
    import "PackageInstallation";
    import "PackageCallbacks";
    import "Wizard";
    import "Progress";


    if(Pkg::TargetInit (Installation::destdir,true) != true)
    {
        if(Popup::ContinueCancel(_("Initializing the target directory failed")) == false)
        {
            return `abort;
        }
    }
    Wizard::CreateDialog();

    SCR::Execute(.target.mkdir,Installation::destdir+"/var/log/YaST2");
    SCR::Execute(.target.mkdir,Installation::destdir+"/etc");

    boolean newsystem = SCR::Read (.target.size, Installation::destdir+"/dev/null") < 0;


    boolean anyToDelete = Pkg::PkgAnyToDelete();
    SlideShow::SetLanguage (UI::GetLanguage(true));
    SlideShow::InitPkgData();
    SlideShow::OpenSlideShowDialog();

    Pkg::TargetLogfile (Installation::destdir+"/var/log/YaST2/y2logRPM");
    integer oldvmlinuzsize = (integer) SCR::Read(.target.size, "/boot/vmlinuz");
    list commit_result = PackageInstallation::CommitPackages (0, 0);                         // Y: commit them !
    integer newvmlinuzsize = (integer) SCR::Read(.target.size, "/boot/vmlinuz");

    SlideShow::CloseSlideShowDialog();

    list<string> progress_stages =
	[
	 // progress stages
	 _("Update configuration"),
	 // progress stages
	 _("Copy files to installed system"),
	 // progress stages
	 _("Prepare system for initial boot")
	 ];

    list<string> progress_descriptions =
	[];


    integer progress_length = 16;
    string help_text = "FIXME";

    Progress::New(
            // Headline for last dialog of base installation: Install LILO etc.
            _("Finishing Directory Installation"),
            "",	// Initial progress bar label - not empty (reserve space!)
            progress_length,	// progress bar length
            progress_stages,
            progress_descriptions,
            help_text );


    y2milestone ("Stopping SCR");

    WFM::SCRClose (Installation::scrHandle);


    // --------------------------------------------------------------


    y2milestone ("Re-starting SCR on %1", Installation::destdir);
    Installation::scrHandle = WFM::SCROpen ("chroot="+Installation::destdir+":scr", false);
    WFM::SCRSetDefault (Installation::scrHandle);

    if(newsystem)
    {
        if(DirInstall::runme_at_boot == true)
        {
            SCR::Execute(.target.mkdir,Installation::destdir+"/var/lib/YaST2");
            SCR::Execute(.target.bash,"/usr/bin/touch "+Installation::destdir+"/var/lib/YaST2/runme_at_boot");
        }
    }

    Progress::NextStep ();
    // progress stage title
    Progress::Title (_("Setting up linker cache"));

    if (SCR::Execute (.target.bash, "/sbin/ldconfig") != 0)
        y2error ("ldconfig failed\n");

    // progress stage title
    Progress::Title (_("Creating mount points"));

    SCR::Execute (.target.mkdir, Installation::sourcedir);

    // setup fonts
    if (SCR::Read (.target.size, "/sbin/conf.d/SuSEconfig.fonts") != -1)
    {
        // progress stage title
        Progress::Title (_("Initializing fonts"));

        if (SCR::Execute (.target.bash, "/sbin/SuSEconfig --module fonts") != 0)
            y2error ("SuSEconfig --module fonts failed");
    }

    UI::CloseDialog();


    return `next;
}
