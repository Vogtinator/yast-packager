/**
 * File:		inst_source.ycp
 *
 * Authors:		Klaus Kaempf <kkaempf@suse.de>
 *			Gabriele Strattner <gs@suse.de>
 *			Stefan Schubert <schubi@suse.de>
 *                      Cornelius Schumacher <cschum@suse.de>
 *
 * Purpose:
 * Displays possibilities to install from NFS, CD or partion
 * Do the "mount" for testing the input.
 *
 * $Id$
 */

{
    textdomain "packager";

    import "Label";
    import "URL";

    define string getServerUrl( symbol type, string host,
				string urlpath, string user,
				string pass,
                                boolean allowHttps);

    /**
     * check if given path points to ISO file
     */
    define boolean path_is_iso (string url) {
	if (size (url) < 4) return false;
	return substring (url, size (url) - 4, 4) == ".iso";
    }

    // add a slash to the part of url, if it is not already present
    define string slashed (string urlpart) {

        if ( substring( urlpart, 0, 1 ) == "/" ) {
          return urlpart;
        }
	return "/" + urlpart;
    }

    /**
        Return an HBox with ok and cancel buttons for use by other dialogs.
        @return An HBox term for use in a CreateDialog call.
    */
    define term dialogButtons() ``{
        return
            `HBox(
                `PushButton( `id( `ok ), `opt( `default ), Label::OKButton() ),
                `HStretch(),
                `PushButton( `id( `cancel ), Label::CancelButton() )
            );
    }

    /**
        Open a dialog for editing of authentification information (basically a
        username and a password.)
    */
    define void editAuthentification() ``{
        UI::OpenDialog(
            `VBox(
		// label
                `Label( _("Authentication") ),

                `RadioButtonGroup(`id(`rb),
                    `VBox(
			// radio button
                        `Left( `RadioButton( `id( `anonymous ), _("A&nonymous") ) ),
			// radio button
                        `Left( `RadioButton( `id( `account ), _("&Account") ) ),
                        `HBox(
                            `HSpacing( 3 ),
				// text entry
                            `TextEntry( `id( `username ), _("User&name") ),
                            `HSpacing( 2 )
                        ),
                        `HBox(
                            `HSpacing( 3 ),
				// text entry
                            `TextEntry( `id( `password ), _("&Password") ),
                            `HSpacing( 2 )
                        ),
                        dialogButtons()
                    )
                )
            )
        );

        any authinput = nil;

        repeat
        {
            authinput = UI::UserInput();
            y2debug( "Auth Input: %1", authinput );

            if ( authinput == `ok )
            {
                y2debug( "ok clicked" );
            }

        } until ( authinput == `cancel || authinput == `ok );

        UI::CloseDialog();
    }

    /**
        Open a dialog for editing of FTP server information.
    */
    define void editFtp() ``{
        UI::OpenDialog(
            `VBox(
		`HSpacing (50),
		// label
                `Label( _("FTP Server and Directory") ),
		// text entry
                `TextEntry( `id( `server ), _("&Server Name") ),
		// text entry
                `TextEntry( `id( `dir ), _("&Directory on Server") ),
                `HBox(
		    // label
                    `Label( _("Authentication:") ),
		    // label
                    `Label( `id( `auth ), _("Anonymous") ),
		    // push button
                    `PushButton( `id( `auth_button ), _("E&dit...") )
                ),
                dialogButtons()
            )
        );
	UI::SetFocus (`id (`server));

        any input = nil;

        repeat
        {
            input = UI::UserInput();
            y2debug( "Input: %1", input );

            if ( input == `auth_button )
            {
                editAuthentification();
            }
            else if ( input == `ok )
            {
                y2debug( "ok clicked" );
            }

        } until ( input == `cancel || input == `ok );

        UI::CloseDialog();
    }

    /**
        Get a nfs url.
    */
    define string getNfsUrl( string host, string urlpath) ``{
        if ( substring( urlpath, 0, 1 ) == "/" ) {
          urlpath = substring( urlpath, 1 );
        }

        UI::OpenDialog(
            `VBox(
		`HSpacing (50),
		// label
                `Label( _("NFS Server Source") ),
		// text entry
                `TextEntry( `id( `server ), _("&Server Name"), host ),
		// text entry
                `TextEntry( `id( `dir ), _("&Path to Directory or ISO Image"), urlpath ),
		// checkbox label
		`Left (`CheckBox (`id (`ch_iso), _("ISO Image"), path_is_iso (urlpath))),
                dialogButtons()
            )
        );
	UI::SetFocus (`id (`server));

        string url = "";

        any input = nil;

        repeat
        {
            input = UI::UserInput();
            y2debug( "Input: %1", input );

            if ( input == `ok )
            {
                string server = (string) UI::QueryWidget( `id( `server ), `Value );
                string dir = (string) UI::QueryWidget( `id( `dir ), `Value );
		boolean iso = (boolean) UI::QueryWidget(`id(`ch_iso),`Value) ||
		    path_is_iso (dir);
                url = "nfs://" + server + "/" + dir;
		if (iso)
		{
		    y2milestone ("nfs url: %1", url);
		    integer last	= findlastof (dir, "/") + 1;
		    string onlydir	= substring (dir, 0, last);
		    url	= "iso:/?iso=" + substring (dir, last) + "&url=nfs://"
			+ server + "/" + onlydir;
		    y2milestone ("iso url: %1", url);
		}
            }

        } until ( input == `cancel || input == `ok );

        UI::CloseDialog();

	return url;
    }

    /**
        Get url for a cd or dvd.
    */
    define string getCdUrl() ``{
        UI::OpenDialog(
            `VBox(
		`HSpacing (50),
		// label
                `Label( _("CD Installation") ),
                `RadioButtonGroup( `id( `device ),
                    `VBox(
			// radio button
                        `Left( `RadioButton( `id( `cd0 ), _("&CD-ROM"), true )),
//                        `Left( `RadioButton( `id( `cd1 ), "/dev/cdrom1" ) ),
			// radio button
                        `Left( `RadioButton( `id( `dvd ), _("&DVD-ROM") ) )
                    )
                ),
                dialogButtons()
            )
        );
	UI::SetFocus (`id (`cd0));

        string url = "";

        any input = nil;
        repeat
        {
            input = UI::UserInput();
            y2debug( "Input: %1", input );

            if ( input == `ok )
            {
                symbol device = (symbol) UI::QueryWidget( `id( `device ), `CurrentButton );
                if ( device == `cd0 )
                {
                    url = "cd:///";
                }
                else if ( device == `dvd )
                {
                    url = "dvd:///";
                }
            }

        } until ( input == `cancel || input == `ok );

        UI::CloseDialog();

	return url;
    }

    define string getNewServerUrl( symbol protocol )
    ``{
      return getServerUrl( protocol, "", "", "", "", false );
    }

    /**
        Get a URL for a ftp, http, https or samba server, optionally including
        user/password information.
	// FIXME Samba share and workgroup are parts of urlpath

        @param protocol type of server, can be `ftp, `http, `https or `smb.
    */
    define string getServerUrl( symbol type, string host,
                                string urlpath, string user,
                                string pass,
                                boolean allowHttps)
    ``{
        if ( substring( urlpath, 0, 1 ) == "/" ) {
          urlpath = substring( urlpath, 1 );
        }

	string share = "";
	string workgroup = "";
	if (type == `samba)
	{
	    list sharepath = regexptokenize (urlpath,
		"^/*([^/]+)(/.*)?$");
	    share = sharepath[0]:"";
	    urlpath = sharepath[1]:"";
	    if (urlpath == nil)
		urlpath = "/";
	    if (workgroup == nil)
		workgroup = "";
	    if (regexpmatch (urlpath, "^.*;workgroup=[^;]+$"))
	    {
		workgroup = regexpsub (urlpath,
		    "^.*;workgroup=([^;]+)$", "\\1");
		urlpath = regexpsub (urlpath, "^(.*);workgroup=[^;]+$", "\\1");
	    }
	}
	// text entry
	term wg_widget = `TextEntry( `id( `workgroup), _("Workgroup or Domain"),
					workgroup);
	// text entry
	term share_widget = `TextEntry (`id (`share), _("&Share"), share);

        /* build an hbox with all protocols, depending on allowHttps */
        term protocolBox = `HBox(
                                 `HStretch(),
                                 // radio button
                                 `RadioButton( `id( `ftp ),`opt(`notify), _("&FTP") ),
                                 `HStretch(),
                                 // radio button
                                 `RadioButton( `id( `http ),`opt(`notify), _("H&TTP") ),
                                 `HStretch()
                           );
        if (allowHttps) {
          protocolBox = add( add (protocolBox,
                                  // radio button
                                  `RadioButton( `id( `https ),`opt(`notify), _("HTT&PS") ) ),
                             `HStretch() );
        }
        protocolBox = add( add( protocolBox,
                                // radio button
                                `RadioButton( `id( `samba ),`opt(`notify), _("&SMB/CIFS") ) ),
                           `HStretch() );

	term get_directory_widget (any typ, string dir) {
y2internal ("building widget with type %1", typ);
	    return typ == `samba ?
		`VBox (
		    `TextEntry( `id( `dir ),
			// text entry
			_("&Path to Directory or ISO Image"),dir),
		    // checkbox label
		    `Left (`CheckBox (`id(`ch_iso), _("ISO Image"),path_is_iso (dir)))
		) :
		// text entry
                `TextEntry( `id( `dir ), _("&Directory on Server"), dir);
	}

        UI::OpenDialog( `opt( `decorated ), `HBox (`HSpacing (0.5),
            `VBox(
		`HSpacing (50),
		// label
                `Label( _("Server and Directory") ),
                `HBox(
                    `HSpacing( 0.5 ),
		    // frame
                    `Frame( _("P&rotocol"),
                        `RadioButtonGroup( `id( `rb_type ), `opt (`notify),
                                           protocolBox
                        )
                    ),
                    `HSpacing( 0.5 )
                ),
		// text entry
                `TextEntry( `id( `server ), _("Server &Name"), host ),
		`ReplacePoint (`id (`share_rp), share_widget),
		`ReplacePoint (`id(`dir_rp), get_directory_widget(type,urlpath)),
                `HBox(
                    `HSpacing( 0.5 ),
			// frame
                    `Frame( _("Au&thentication"),
                        `VBox(
                            `Left( `CheckBox( `id( `anonymous ),
						// check box
                                              `opt( `notify ), _("&Anonymous"),
                                              size( user ) == 0 ) ),
			    `HBox (
				`ReplacePoint (`id (`workgroup_rp),
				wg_widget)
			    ),
                            `HBox(
				// text entry
                                `TextEntry( `id( `username ), _("&User Name"),
                                            user )
                            ),
                            `HBox(
				// password entry
                                `Password( `id( `password ), _("&Password"),
                                           pass )
                            )
                        )
                    ),
                    `HSpacing( 0.5 )
                ),
                dialogButtons()
            ), `HSpacing (0.5))
        );

        UI::ChangeWidget( `id( `rb_type ), `CurrentButton, type );
	UI::SetFocus (`id (`server));

        string url = "";
        any input = nil;

        repeat
        {

	    if (UI::QueryWidget (`id (`rb_type), `CurrentButton) == `samba)
	    {
		UI::ReplaceWidget (`id (`workgroup_rp), wg_widget);
		UI::ReplaceWidget (`id (`share_rp), share_widget);
		UI::ChangeWidget (`id (`workgroup), `Value, workgroup);
		UI::ChangeWidget (`id (`share), `Value, share);
	    }
	    else
	    {
		UI::ReplaceWidget (`id (`workgroup_rp), `Empty ());
		UI::ReplaceWidget (`id (`share_rp), `Empty ());
	    }

	    UI::ReplaceWidget (`id (`dir_rp), get_directory_widget (
		UI::QueryWidget (`id (`rb_type), `CurrentButton),
		(string) UI::QueryWidget (`id( `dir ), `Value ))
	    );

            boolean anonymous = (boolean) UI::QueryWidget( `id( `anonymous ), `Value );
            UI::ChangeWidget( `id( `username ), `Enabled, !anonymous );
            UI::ChangeWidget( `id( `password ), `Enabled, !anonymous );
	    if (UI::WidgetExists (`id (`workgroup)))
	    {
		UI::ChangeWidget( `id( `workgroup), `Enabled, !anonymous );
	    }

            input = UI::UserInput();
            y2debug( "Input: %1", input );

            if ( input == `ok )
            {
                url = "";
                symbol type = (symbol) UI::QueryWidget( `id( `rb_type), `CurrentButton );
                if ( type == `ftp ) {
                    url = "ftp://";
                } else if ( type == `http ) {
                    url = "http://";
                } else if ( type == `https ) {
                  url = "https://";
                } else if ( type == `samba ) {
                    url = "smb://";
                }

                if ( !anonymous )
                {
                    string user = (string) UI::QueryWidget( `id( `username ), `Value );
                    string password = (string) UI::QueryWidget( `id( `password ), `Value );

                    if ( size( user ) != 0 ) {
                        url = url + user;
                        if ( size( password ) != 0 ) {
                            url = url + ":" + password;
                        }
                        url = url + "@";
                    }
                }

                string server = (string) UI::QueryWidget( `id( `server ), `Value );
                string directory = (string) UI::QueryWidget( `id( `dir ), `Value );
		if ((type == `samba) && (
			(boolean)(UI::QueryWidget(`id(`ch_iso),`Value)) ||
		        path_is_iso (directory))
		    )
		{
		    y2milestone ("url: %1, directory: %2", url, directory);
		    integer last	= findlastof (directory, "/") + 1;
		    url = sformat ("iso:/?iso=%1&url=%2",
			substring (directory, last), url);
		    directory		= substring (directory, 0, last);
		    y2milestone ("iso url: %1, directory: %2", url, directory);
		}

		if (UI::WidgetExists (`id (`share)))
		{
		    share = (string)UI::QueryWidget (`id (`share), `Value);
		    url = url + server + slashed(share) + slashed(directory);
		}
		else if (type == `ftp)
		    url = url + server + "/" + directory;
		else
		    url = url + server + slashed(directory);

		if (UI::WidgetExists (`id (`workgroup)))
		     workgroup = (string)UI::QueryWidget (`id (`workgroup), `Value);
		if (type == `samba && size (workgroup) > 0)
		    url = url + ";workgroup=" + workgroup;

            }
        } until ( input == `cancel || input == `ok );

        UI::CloseDialog();
	return url;
    }

    /**
     * Let the user put in a directory url.
     *
     * @param defaulturl  initial default
     * @return directory url on success, empty string when the user
     *   canceled the dialog.
    */
    define string getDirectoryUrl( string defaulturl) {

        UI::OpenDialog(
            `VBox(
		`HSpacing (50),
		// label
                `Label( _("Local Directory or ISO") ),
                `HBox(
			// text entry
                    `TextEntry( `id( `dir ), _("&Path to Directory or ISO Image") ),
		    `VBox (
			`Label (""),
			// push button
			`PushButton( `id( `browse ), _("&Browse...") )
		    )
                ),
		// checkbox label
		`Left (`CheckBox (`id (`ch_iso), _("ISO Image"),path_is_iso (defaulturl))),
                dialogButtons()
            )
        );

        UI::ChangeWidget( `id( `dir ), `Value, defaulturl );
	UI::SetFocus (`id (`dir));

        string url = "";

        any input = nil;

        repeat
        {
            input = UI::UserInput();
	    boolean iso   = (boolean)UI::QueryWidget(`id(`ch_iso), `Value);
            if ( input == `browse )
            {
                url = (string) UI::QueryWidget( `id( `dir ), `Value );

		string result = iso ?
		    // dialog caption
		    UI::AskForExistingFile (url, "*", _("ISO Image File")) :
		    // dialog caption
		    UI::AskForExistingDirectory( url, _("Local Directory") );
                if ( result != nil )
                {
                    UI::ChangeWidget( `id( `dir ), `Value, result );
                }
            }
            else if ( input == `ok )
            {
                url = (string) UI::QueryWidget( `id( `dir ), `Value );
		iso = iso || path_is_iso (url);
		y2milestone ("directory: %1, is iso: %2", url, iso);
                url = iso ? ("iso:/?iso=" + url) : ("dir://" + url);
            }
            else if ( input == `cancel )
            {
                url = "";
            }

        } until ( input == `cancel || input == `ok );

        UI::CloseDialog();
	return url;
    }

    define string getUrl2( string url, boolean allowHttps ) ``{
        term protocolBox =
          `VBox(
                /* RadioButton label */
                `Left( `RadioButton( `id( `dir ), _("D&irectory"), true ) ),
                /* RadioButton label */
                `Left( `RadioButton( `id( `ftp ), "&FTP" ) ),
                /* RadioButton label */
                `Left( `RadioButton( `id( `http ), "&HTTP" ) )
                      );
        if (allowHttps) {
          protocolBox = add ( protocolBox,
                              /* RadioButton label */
                              `Left ( `RadioButton( `id( `https ), "HTT&PS" ) ) );
        }
        protocolBox = add ( protocolBox,
                            /* RadioButton label */
                            `Left( `RadioButton( `id( `samba ), "&SMB/CIFS" ) ) );
        protocolBox = add ( protocolBox,
                            /* RadioButton label */
                            `Left( `RadioButton( `id( `nfs ), "&NFS" ) ) );
        protocolBox = add ( protocolBox,
                            /* RadioButton label */
                            `Left( `RadioButton( `id( `cd ), "&CD" ) ) );
        protocolBox = add ( protocolBox,
                            /* RadioButton label */
                            `Left( `RadioButton( `id( `dvd ), "&DVD" ) ) );

        UI::OpenDialog(`VBox(
                             /* Label text */
                             `Label( _("Select Type of URL:") ),
                             `RadioButtonGroup( `id(`url_type),
                                                protocolBox
                              ),
                              dialogButtons()
                       )
        );

	string url = "";
	UI::SetFocus (`id (`dir));

        any input = UI::UserInput();

        if ( input == `ok )
        {
            symbol type = (symbol) UI::QueryWidget( `id( `url_type), `CurrentButton );

            UI::CloseDialog();

            if ( type == `ftp || type == `http || type == `https || type == `samba ) {
              url = getServerUrl( type, "", "", "", "", allowHttps );
            } else if ( type == `dir ) {
                url = getDirectoryUrl( url);
            } else if ( type == `nfs ) {
                url = getNfsUrl( "", "");
            } else if ( type == `cd || type == `dvd ) {
                url = getCdUrl();
            }
        } else {
            UI::CloseDialog();
        }

        return url;
    }

    define string editUrl2( string url, boolean allowHttps ) ``{                                                                  
      if ( size( url ) == 0 ) return getUrl2( "", allowHttps );

	if (substring (url, 0, 5) == "iso:/" &&
	    issubstring (url, "&url="))
	{
	    integer url_pt = find (url, "&url=");
	    string serverpart = substring (url, url_pt + 5);
	    string isopart = substring (url, 0, url_pt);
	    url	= serverpart + substring (isopart, find (isopart, "iso=") + 4);
	}

        map parsedUrl = URL::Parse( url );
        string protocol = parsedUrl[ "scheme" ]:"";
        string urlpath = parsedUrl[ "path" ]:"";

        if ( protocol == "ftp" || protocol == "http" || protocol == "https" || protocol == "smb" ) {
            string host = parsedUrl[ "host" ]:"";
            string user = parsedUrl[ "user" ]:"";
            string pass = parsedUrl[ "pass" ]:"";
            symbol type = `ftp;
            if ( protocol == "http" ) type = `http;
            else if ( protocol == "https" ) type = `https;
            else if ( protocol == "smb" ) type = `samba;
            url = getServerUrl( type, host, urlpath, user, pass, allowHttps );
        } else if ( protocol == "nfs" ) {
            string host = parsedUrl[ "host" ]:"";
            url = getNfsUrl( host, urlpath );
        } else if ( protocol == "dir" || protocol == "file" ) {
            url = getDirectoryUrl( urlpath );
        } else if ( protocol == "cd" || protocol == "dvd" ) {
            url = getCdUrl();
        } else {
            y2error( "Unsupported URL: %1", url );
        }

        return url;
    }

    define string editUrl( string url) ``{
        return editUrl2( url, true );
    }

    string editRawUrl( string url ) {
        UI::OpenDialog(
            `VBox(
		`HSpacing (50),
		// label
                `Label( _("Catalog URL") ),
		// text entry
                `TextEntry( `id( `url ), _("&URL"), url ),
                dialogButtons()
            )
        );
	UI::SetFocus (`id (`url));

        string url = "";

        any input = nil;

        repeat
        {
            input = UI::UserInput();
            y2debug( "Input: %1", input );

            if ( input == `ok )
            {
		url = (string)UI::QueryWidget(`id( `url ), `Value );
		if (url == "")
		{
		    UI::SetFocus (`id (`url));
		    // popup message
		    Popup::Message (_("URL cannot be empty."));
		    input = nil;
		}
            }

        } until ( input == `cancel || input == `ok );

        UI::CloseDialog();

	return url;
    }
}

