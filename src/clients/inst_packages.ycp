/**
 * Module: 		inst_packages.ycp
 * Authors:		Stefan Hundhammer <sh@suse.de>
 * Purpose:             Show the package installation dialog
 *
 * $Id$
 *
 */

{
    textdomain "packager";

    import "Mode";
    import "Stage";
    import "Wizard";
    import "Label";


    /**
     * Start the detailed package selection. If 'mode' is non-nil, it will be
     * passed as an option to the PackageSelector widget.
     *
     * Returns `accept or `cancel .
     **/
    symbol detailedSelection( symbol mode, boolean enable_repo_mgr )
    {
	y2milestone("Running detailed selection, mode: %1, display repo management: %2", mode, enable_repo_mgr);

	// Open an empty dialog for immediate feedback
	UI::OpenDialog(`opt(`defaultsize),
		       `ReplacePoint(`id( `rep),
				     `Label( _("Reading package database...") )
				     )
		       );

	// This will take a while: Detailed package data are retrieved
	// while the package manager is initialized
	UI::ReplaceWidget(`rep,
			  mode == nil ?
			  (enable_repo_mgr ?
			    `PackageSelector(`id(`packages), `opt(`repoMgr), "")
			    : `PackageSelector(`id(`packages), "")
			  ) :

			  (enable_repo_mgr ?
			    `PackageSelector(`id(`packages ), `opt(mode, `repoMgr), "")
			    : `PackageSelector(`id(`packages ), `opt(mode), "")
			  )
			  );

	symbol result = (symbol) UI::RunPkgSelection(`id(`packages ) );
	UI::CloseDialog();
	y2milestone( "Package selector returned  %1", result );

	return result;
    }


    /**
     * Start the pattern selection dialog. If the UI does not support the
     * PatternSelector, start the detailed selection with "selections" as the
     * initial view.
     **/
    symbol patternSelection()
    {
	y2milestone("Running pattern selection dialog");

	if ( ! UI::HasSpecialWidget(`PatternSelector ) ||
	     UI::WizardCommand(`Ping() ) != true	 )
	{
	    return detailedSelection( nil, !Stage::initial() );	// Fallback: detailed selection
	}

	// Help text for software patterns / selections dialog
	string help_text
	    = _("<p>
		 This dialog allows you to define this system's tasks and what software to install.
		 Available tasks and software for this system are shown by category in the left
		 column.  To view a description for an item, select it in the list.
		 </p>")
	    + _("<p>
		 Change the status of an item by clicking its status icon
		 or right-click any icon for a context menu.
		 With the context menu, you can also change the status of all items.
		 </p>")
	    + _("<p>
		 <b>Details</b> opens the detailed software package selection
		 where you can view and select individual software packages.
		 </p>")
	    + _("<p>
		 The disk usage display in the lower right corner shows the remaining disk space
		 after all requested changes will have been performed.
		 Hard disk partitions that are full or nearly full can degrade
		 system performance and in some cases even cause serious problems.
		 The system needs some available disk space to run properly.
		 </p>");

	// bugzilla #298056
	// [ Back ] [ Cancel ] [ Accept ] buttons with [ Back ] disabled
	Wizard::OpenNextBackDialog();
	Wizard::SetBackButton  (`back,   Label::BackButton());
	Wizard::SetAbortButton (`cancel, Label::CancelButton());
	Wizard::SetNextButton  (`accept, Label::OKButton());
	Wizard::DisableBackButton();

	Wizard::SetContents(
			    // Dialog title
			    // Hint for German translation: "Softwareauswahl und Einsatzzweck des Systems"
			    _("Software Selection and System Tasks"),
			    `PatternSelector(`id(`patterns ) ),
			    help_text,
			    false,	// has_back
			    true );	// has_next

	Wizard::SetDesktopIcon( "sw_single" );

	symbol result = nil;

	repeat
	{
	    result = (symbol) UI::RunPkgSelection(`id(`patterns ) );
	    y2milestone( "Pattern selector returned %1", result );

	    if ( result == `details )
	    {
		result = detailedSelection( nil, !Stage::initial() );

		if ( result == `cancel )
                    // don't get all the way out - the user might just have
                    // been scared of the gory details.
		    result = nil;

	    }

	} until ( result == `cancel || result == `accept );

	Wizard::CloseDialog();

	return result;
    }




    ///////////////////////////////////////////////////////////////////////////
    // MAIN
    ///////////////////////////////////////////////////////////////////////////

    symbol result = `cancel;

    y2milestone("Stage: %1, Mode: %2, Args: %3", Stage::stage(), Mode::mode(), WFM::Args());

    // installation or update from a running system (there is a "Pattern Selection" button) (#229951)
    if (size(WFM::Args()) == 0 && (Stage::initial() || (Stage::normal() && Mode::update())))
    {
	result = patternSelection();
    }
    else
    {
        if ( size( WFM::Args() ) > 0 && is( WFM::Args(0), map ) )
	{
	    y2milestone("inst_packages called with options: %1", WFM::Args());

	    symbol mode = nil;
	    boolean repo_mgr = nil;

	    // the options may be passed in a map or in a list
	    if (is(WFM::Args(0), map))
	    {
		map opts = (map) WFM::Args(0);
		mode = opts["dialog_type"]:`searchMode;
		repo_mgr = opts["repo_mgr"]:false;
	    }
	    else if (is(WFM::Args(0), symbol))
	    {
		mode = (symbol)WFM::Args(0);

		if (is(WFM::Args(1), symbol))
		{
		    repo_mgr = WFM::Args(1) == `repoMgr;
		}
	    }

	    if (mode == nil)
	    {
		mode = `searchMode;
	    }

	    if (repo_mgr == nil)
	    {
		repo_mgr = Mode::normal();
	    }

	    if (mode == `patternSelector || mode == `pattern)
	    {
		result = patternSelection();
	    }
	    else
	    {
		result = detailedSelection(mode , repo_mgr);
	    }
	}
	else
	{
	    result = detailedSelection(`searchMode, false);
	}
    }

    return result;
}
