{
  textdomain "packager";

  import "Label";
  import "Popup";
  import "Progress";
  import "Sequencer";
  import "WebpinPackageSearch";
  import "Wizard";

  list <map> search_results = [];
  map <string, integer> index = $[];

  boolean AbortFunction() {
    any ret = UI::PollInput();

    if (ret == `abort)
	return true;
    else
	return false;
  }

  term CreateSummary() {
	string  repo_heading = _("<h1>The following repositories will be added:</h1>");
	string  pkg_heading = _("<h1>The following packages will be installed:</h1>");
	return `RichText(`id(`summary), repo_heading + pkg_heading);
  }

  string SearchExpression() {
	string ret = (string) UI::QueryWidget(`id("search_text"), `Value);

	if (ret == "") {
	     Popup::Message(_("Search expression must not be empty!")); 
	     UI::SetFocus(`id("search_text"));
	}
	return ret;
  }

  map <string, boolean> SearchParameters() {
    list p = (list) UI::QueryWidget(`id("search_in"), `SelectedItems);

    map <string, boolean> ret = listmap ( string key, [ "name", "description", "contents" ], {
	    return $[ key : contains (p, key)];
	});
    //y2internal("%1", ret);
    return ret;
  }

  void CreatePackageDescription( ) {
     string checksum = (string) UI::QueryWidget(`id("results"), `CurrentItem );
     map citem = search_results [ index[checksum]: 0 ]: $[];

     string descr = sformat(_("<b>Repository URL:</b> %1<br>"), citem["repoURL"]:"");
     string version = sformat(_("<b>Version</b> %1<br>"), citem["version"]:"");

     UI::ChangeWidget(`id("description"),`Value, descr+version);
  }

  list CreatePackageList( list < map > results ) {
    list pkg_items = [];
    integer i = 0;

   foreach ( map  it, results, {
	pkg_items = add( pkg_items, `item(`id(it["checksum"]:""),it["name"]:"" + " - " + it["summary"]:"" ));
	index = add( index, it["checksum"]:"", i);
	i = i+1; 
    });
    y2internal("%1", pkg_items);
    return pkg_items;
  } 

  symbol ReadDialog() {
    list <string> steps = [
	_("Check Network Configuration"),
	_("Initialize Package Manager")
    ];

    list <string> actions = [
	_("Checking Network Configuration ..."),
	_("Initializing Package Manager ... ")
    ];

    Progress::New(
	_("Reading Package Search Setup"),
	" ",
	size(steps),
	steps,
	actions,
	_("Some very boring help text")
     );

     Progress::NextStage();
     if (AbortFunction()) return `abort;
     sleep(100);

     Progress::NextStage();
     if (AbortFunction()) return `abort;
     sleep(100);

     Progress::Finish();
     return `next;
  }

  symbol MainDialog() {
    Wizard::SetContents (
            // TRANSLATORS: dialog caption
            _("Package Search"),
            `VBox (
                `HBox (
                    `VBox(
			`MinWidth(20, `TextEntry (`id ("search_text"), "Search &Expression")),
                    // TRANSLATORS: push button
                        `Left(`PushButton (`id ("search"),  _("&Search"))),
                        `VStretch()
		    ),
		    `MultiSelectionBox(
		        `id("search_in"),
		       _("Search in"),
		       [
			`item( `id("name"),_("Name"), true ),
			`item( `id("description"), _("Description"), true ),
			`item( `id("contents"), _("Contents"))
			]
		     )//,
                ),
				//`RadioButtonGroup(
		//    `id(`rb),
		//    `VBox(
		//        `Left(`Label( _("Search Repositories"))),
		//        `Frame( "",
		//	    `VBox(
		//                `Left(`RadioButton(`id("current_product"),_("Current product") ) ),
		//                `Left(`RadioButton(`id("factory"),_("Factory") ) ),
		//                `VStretch()
		//	    )
		//         )
		//    )
		//)
	    //)
		//),
                `VWeight (
                    2,
                    `MultiSelectionBox(
                        `id ("results"), `opt (`notify, `hstretch),
                        // TRANSLATORS: multi-selection box
                        _("&Found Packages"), []
                    )
                ),
		`Left( `Label( _("Package Description")) ),
		`VWeight(
		    1,
		    `RichText(`id("description"), "")
		)
	    ),
	    _("Some very boring help text"),
	    //We don't need back button
	    false,
	    true
    );

    UI::SetFocus(`id("search_text"));

    any dialog_ret = nil;
    while (true) {
	dialog_ret = UI::UserInput();
	if (dialog_ret == `next)
	    break;
	else if (dialog_ret == "search") {
	    string search_expr = SearchExpression();

	    if (search_expr != "") {
	        search_results =
		    WebpinPackageSearch::SearchForPackages(
	                search_expr,
	                nil,
	                SearchParameters()
	        );
		list items = CreatePackageList( search_results );

		if (items != nil) {
		    UI::ChangeWidget(`id("results"), `Items, items);
		    UI::SetFocus(`id("results"));
		    CreatePackageDescription();
		}
	    }
	    else
		continue;
	}
	else if (dialog_ret == "results") {
	    CreatePackageDescription();
	}
    }
    return (symbol) dialog_ret;

  }

  symbol SummaryDialog() {
    Wizard::SetContentsButtons(
	_("Summary"),
	CreateSummary(),
	_("Some very boring help text"),
	Label::BackButton(),
	Label::FinishButton()
    );

    any sum_ret = nil;

    while(true) {
	sum_ret = UI::UserInput();
	if (sum_ret == `next)
	    break;
    }

    return (symbol) sum_ret;
  }

  symbol MainSequence () {
        map aliases = $[
            "read"      : ``( ReadDialog() ),
            "main"   : ``( MainDialog() ),
	    "summary" : ``(SummaryDialog() ),
//	    "write"   : ``(WriteDialog())
        ];

        map sequence = $[
            "ws_start"  : "read",
            "read"      : $[
                `next   : "main",
                `abort  : `abort,
            ],
            "main"   : $[
                `abort  : `abort,
		`next	: "summary"
            ],
	    "summary" : $[
		`abort : `abort,
		`next  : `next//"write" 
	    ],
//	    "write" : $[
//		`abort : `abort,
//		`next  : `next
//	    ],
        ];

	any seq_ret = Sequencer::Run( aliases, sequence );

	return (symbol) seq_ret;
  }


  Wizard::CreateDialog();

  symbol client_ret = MainSequence();

  Wizard::CloseDialog();

  return client_ret;

}
