/**
 * File:	DefaultDesktop.ycp
 * Package:	Handling of default desktop selection
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *		Lukas Ocilka <locilka@suse.cz>
 *
 * $Id: Packages.ycp 31512 2006-06-19 11:14:09Z jsrain $
 */

{

module "DefaultDesktop";

textdomain "packager";

import "ProductFeatures";
import "Installation";

// Could be defined in control file
// @see GetAllDesktopsMap
map <string, map> all_desktops = $[
    "gnome" :  $[
        "order" : 1,
        // TRANSLATORS: Dialog label
        "label" : _("GNOME"),
        "patterns" : ["gnome", "x11", "base"],
        "icon" : "pattern-gnome",
        "description" : _("GNOME 2.22 is the latest desktop from the GNOME Project.
It combines stability and maturity with incremental innovations."),
    ],
    "kde" : $[
        "order" : 1,
	// TRANSLATORS: Dialog label
        "label" : _("KDE 4.0"),
        "patterns" : ["kde", "x11", "base"],
        "icon" : "pattern-kde4",
        "description" : _("KDE 4.0 is the most recent evolution of KDE. It comes with many
new KDE technologies, but it is less mature than the other desktops."),
    ],
    "kde3" : $[
        "order" : 1,
	// TRANSLATORS: Dialog label
        "label" : _("KDE 3.5"),
        "patterns" : ["kde3", "x11", "base"],
        "icon" : "pattern-kde",
        "description" : _("KDE 3.5 is the previous generation of K Desktop Environment.
It is mature and stable."),
    ],
    "xfce" : $[
        "order" : 4,
        // TRANSLATORS: Dialog label
        "label" : _("XFCE Desktop"),
        "patterns" : ["xfce", "x11", "base"],
        "icon" : "pattern-xfce",
    ],
    "min_x" : $[
        "order" : 6,
        // TRANSLATORS: Dialog label
        "label" : _("Minimal X Window"),
        "patterns" : ["x11", "base"],
        "icon" : "yast-x11",
    ],
    "textmode" : $[
        "order" : 8,
        // TRANSLATORS: Dialog label
        "label" : _("Minimal Server Selection (Text Mode)"),
        "patterns" : ["enhanced_base"],
        "icon" : "yast-sshd",
    ],
];

/**
 * Returns map of pre-defined default system tasks
 *
 * @return map <string, map> all_system_tasks
 *
 * @struct $[
 *     "desktop ID" : $[
 *         "order" : integer,
 *         "label" : _("Desktop Name Visible in Dialog"),
 *         "description" : _("Description text of the desktop"),
 *         "patterns" : ["list", "of", "related", "patterns"],
 *         "icon" : "some-icon", // filename from the 32x32 directory of the current theme (without .png suffix)
 *     ],
 * ]
 */
global map <string, map> GetAllDesktopsMap () {
    return all_desktops;
}

/**
 * Return list installed desktops or desktop selected for installation.
 *
 * @see GetAllDesktopsMap
 */
global list <string> SelectedDesktops () {
    Pkg::TargetInit (Installation::destdir, true);
    Pkg::SourceStartManager (true);
    Pkg::PkgSolve (true);

    list <string> all_sel_or_inst_patterns = maplist (map <string, any> one_pattern, Pkg::ResolvableProperties ("", `pattern, ""), {
	if (one_pattern["status"]:`unknown == `selected || one_pattern["status"]:`unknown == `installed) {
	    return one_pattern["name"]:"";
	}
    });

    // all selected or installed patterns
    all_sel_or_inst_patterns = filter (string one_pattern, all_sel_or_inst_patterns, {
	return (one_pattern != nil);
    });

    list <string> selected_desktops = [];
    boolean selected = true;

    foreach (string desktop_name, map desktop_def, all_desktops, {
	selected = true;

	foreach (string one_pattern, desktop_def["patterns"]:[], {
	    if (! contains (all_sel_or_inst_patterns, one_pattern)) {
		selected = false;
		return;
	    }
	});

	if (selected)
	    selected_desktops = add (selected_desktops, desktop_name);
    });

    return selected_desktops;
}

/**
 * Desktop which was selected in the desktop selection dialog
 * "kde", "gnome", "min_x11", "text"
 */
string desktop = nil;

/**
 * Window manager to be set according to selected desktop
 */
map<string,string> desktop2wm = $[
    "gnome" : "gnome",
    "kde" : "kde",
    "xfce" : "twm",
    "min_x" : "twm",
    "textmode" : "twm",
];

/**
 * Get the currently set default desktop, nil if none set
 * @return string "kde", "gnome", "xfce", "min_x", "textmode", nil
 */
global string Desktop () {
    return desktop;
}

/**
 * Set the default desktop
 * @param desktop a string, one of "kde", "gnome", "min_x", "textmode" or nil
 */
global void SetDesktop (string new_desktop) {
    if (new_desktop != nil && ! haskey (all_desktops, new_desktop))
	y2error ("Attempting to set desktop to unknown %1", new_desktop);
    else
	desktop = new_desktop;
}

/**
 * Get preffered window/desktop manager for the selected desktop
 * @return string preffered window/desktop manager, empty if no one
 */
global string PrefferedWindowManager () {
    return desktop2wm[desktop]:"";
}

/**
 * Get patterns which should be selected for currently selected desktop
 * @return a list of patterns
 */
global list<string> PatternsToSelect () {
    return all_desktops[desktop, "patterns"]:[];
}

/**
 * Get patterns which should be NOT selected for currently selected desktop
 * @return a list of patterns
 */
global list<string> PatternsToDeselect () {
    // patterns which must be selected
    list <string> patterns_to_select = PatternsToSelect();

    list <string> patterns_to_deselect = [];

    // go through all known system task definitions
    foreach (string one_desktop, map desktop_descr, all_desktops, {
	// all patterns required by a system type
	foreach (string one_pattern, desktop_descr["patterns"]:[], {
	    // if not required, add it to 'to deselect'
	    if (one_pattern != nil && ! contains (patterns_to_select, one_pattern)) {
		patterns_to_deselect = add (patterns_to_deselect, one_pattern);
	    }
	});
    });

    y2milestone ("Patterns to deselect '%1' -> %2", desktop, patterns_to_deselect);

    return patterns_to_deselect;
}

/**
 * Get the description of the currently selected desktop for the summary
 * @return string the description of the desktop
 */
global string Description () {
    // TRANSLATORS: dialog label
    return all_desktops[desktop, "label"]:_("No system type selected");
}

/**
 * Initialize default desktop from control file if specified there
 */
global void Init () {
    string default_desktop = ProductFeatures::GetStringFeature
	("software", "default_desktop");
    if (default_desktop == "")
	default_desktop = nil;
    desktop = default_desktop;
}

/* EOF */
}
