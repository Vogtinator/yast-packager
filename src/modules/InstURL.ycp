/**
 * Module:		InstURL.ycp
 *
 * Authors:		Klaus Kaempf (kkaempf@suse.de)
 *
 * Purpose:		Convert /etc/install.inf data to URL
 *
 *
 * $Id$
 */

{
    textdomain "packager";

    module "InstURL";
    import "Linuxrc";
    import "URL";


    global boolean is_network = true;

    
    global string  HidePassword(string url) {
        map t = URL::Parse(url);
        if (size(t["pass"]:"") > 0 )
        {
            t["pass"] = "XXXXXXXX";
        }
        return URL::Build(t);
    }
    
    global string installInf2Url (string extra_dir)
    {
	string options = "";
        map url_tokens =  $[];

	string instmode = Linuxrc::InstallInf("InstMode");	// mode
	if (instmode == nil)	// defaults to "CD"
	{
	    instmode = "cd";
	}

	if ((instmode == "cd")					// CD or DVD
	    || (instmode == "dvd"))
	{
	    is_network = false;
	    list<map> devicelist = (list<map>) SCR::Read(.probe.cdrom);
	    foreach (map device, devicelist,
	    {
		string devname = device["dev_name"]:"";
		if (devname != "")
		{
		    if (options != "") options = options + ",";
		    options = options + devname;
		}
	    });
	    if (options != "")
	    {
		options = "devices=" + options;
	    }
	}
	else if (instmode == "hd")						// Harddisk
	{
	    is_network = false;
// FIXME may be nil
	    options = "device=/dev/" + Linuxrc::InstallInf("Partition") + ";filesystem=auto";
	}

        
        url_tokens["scheme"] = instmode;

	if (is_network)
	{
	    string username = Linuxrc::InstallInf("Username");
	    if ((username != nil) && (username != ""))
	    {
                url_tokens["user"] = username;
		string password = Linuxrc::InstallInf("Password");
		if ((password != nil) && (password != ""))
		{
                    url_tokens["pass"] = password;
		}
	    }
	    string servername = Linuxrc::InstallInf("Server");
	    string serverip = Linuxrc::InstallInf("ServerIP");

	    if ((servername != nil) && (servername != ""))
	    {
                url_tokens["host"] = servername;
	    }
	    else if ((serverip != nil) && (serverip != ""))
	    {
                url_tokens["host"] = serverip;
	    }

	} // is_network

	string serverdir = Linuxrc::InstallInf("Serverdir");
        /*
	if (((instmode == "hd") || is_network)				// if serverdir needed
	    && ((serverdir != nil) && (serverdir != "")))		// and is valid
	{
	    // for smb mounts it is usual to not have a leading slash
	    if (substring (serverdir, 0, 1) != "/")
		serverdir = "/" + serverdir;
	} 
        */

	if (extra_dir != "")
	{
            if (serverdir != nil)
            {
                // avoid too many slashes
                if (findlastof(serverdir, "/") == size(serverdir) - 1)
                {
                    serverdir = substring(serverdir,  0  , size(serverdir) - 1 );
                }

                string slash = "";
                if (substring (extra_dir, 0, 1) != "/")
                    slash = "/";
	        serverdir = serverdir + slash + extra_dir;
                slash = "";
            }
            else
                serverdir = extra_dir;
	}

	if (serverdir == nil || serverdir == "")
	    url_tokens["path"] = serverdir;

        string url = URL::Build(url_tokens);

	if (is_network)
	{
            // broken in linuxrc, might be Portname... (#50781)
	    string port = Linuxrc::InstallInf("Port");
	    if ((port != nil) && (port != ""))
	    {
                url_tokens["port"]  = port;
	    }
	    string proxy = Linuxrc::InstallInf("Proxy");
	    if ((proxy != nil) && (proxy != ""))
	    {
		url = url + ";proxy=" + proxy;
	    }
	    string proxyport = Linuxrc::InstallInf("ProxyPort");
	    if ((proxyport != nil) && (proxyport != ""))
	    {
		url = url + ";proxyport=" + proxyport;
	    }
	    string proxyproto = Linuxrc::InstallInf("ProxyProto");
	    if ((proxyproto != nil) && (proxyproto != ""))
	    {
		url = url + ";proxyproto=" + proxyproto;
	    }
	    string proxyuser = Linuxrc::InstallInf("ProxyUser");
	    if ((proxyuser != nil) && (proxyuser != ""))
	    {
		url = url + ";proxyuser=" + proxyuser;
	    }
	    string proxypassword = Linuxrc::InstallInf("ProxyPassword");
	    if ((proxypassword != nil) && (proxypassword != ""))
	    {
		url = url + ";proxypassword=" + proxypassword;
	    }
	} // is_network

	if (options != "")
	{
	    url = url + ";" + options;
	    y2milestone ("options %1", options);
	}
	y2debug ("URL %1", HidePassword(url));
	return url;
    }
}
