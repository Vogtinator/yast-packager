/**
 * Module:		SignatureCheckCallbacks.ycp
 * Authors:		Lukas Ocilka <locilka@suse.cz>
 *
 * Callbacks for handling signatures.
 *
 * $Id: SignatureCheckCallbacks.ycp 28363 2006-02-24 12:27:15Z locilka $
 */

{
    textdomain "packager";
    
    module "SignatureCheckCallbacks";

    import "SignatureCheckDialogs";


    /* ============================ < Callbacks for Sources > ============================ */

    // Name of the callback handler function. Required callback prototype is
    // boolean(string filename). The callback function should ask user whether the
    // unsigned file can be accepted, returned true value means to accept the
    // file.
    //
    // zypp: askUserToAcceptUnsignedFile
    //
    /* function for CallbackAcceptUnsignedFile() */
    global boolean AcceptUnsignedFile (string filename) {
	return SignatureCheckDialogs::UseUnsignedItem(`file, filename);
    }
    

    // Name of the callback handler function. Required callback prototype is
    // boolean(string filename, string keyid, string keyname). The callback
    // function should ask user whether the unknown key can be accepted, returned
    // true value means to accept the file.
    //
    // zypp: askUserToAcceptUnknownKey
    //
    /* function for CallbackAcceptUnknownGpgKey() */
    global boolean AcceptUnknownGpgKey (string filename, string keyid, string keyname) {
	// Unknown keyname == "Unknown Key"
	return SignatureCheckDialogs::ItemSignedWithUnknownSignature(`file, filename, keyid);
    }
    
    // Name of the callback handler function. Required callback prototype is
    // boolean(string keyid, string keyname, string keydetails). The callback
    // function should ask user whether the key is trusted, returned true value
    // means the key is trusted.
    //
    // zypp: askUserToTrustKey
    //
    /* function for CallbackImportGpgKey() */
    global boolean ImportGpgKey (string keyid, string keyname, string keydetails) {
	return SignatureCheckDialogs::ImportUntrustedGPGKeyIntoTrustedDialog(keyid, keyname, keydetails);
    }
    
    // Name of the callback handler function. Required callback prototype is
    // boolean(string filename, string keyid, string keyname). The callback
    // function should ask user whether the unsigned file can be accepted,
    // returned true value means to accept the file.
    //
    // zypp: askUserToAcceptVerificationFailed
    //
    /* function for CallbackAcceptVerificationFailed() */
    global boolean AcceptVerificationFailed (string filename, string keyid, string keyname) {
	return SignatureCheckDialogs::UseCorruptedItem(`file, filename, keyid, keyname);
    }
    
    /* ============================ < Callbacks for Sources > ============================ */
    
    // Name of the callback handler function. Required callback prototype is void
    // (string keyid, string keyname). The callback function should inform user
    // that a trusted key has been added.
    //
    /* function for CallbackTrustedKeyAdded() */
    void TrustedKeyAdded (string keyid, string keyname) {
	y2milestone("Trusted key has been added: %1 (%2)", keyid, keyname);
	return nil;
    }
    
    // Name of the callback handler function. Required callback prototype is void
    // (string keyid, string keyname). The callback function should inform user
    // that a trusted key has been removed.
    //
    /* function for CallbackTrustedKeyRemoved() */
    void TrustedKeyRemoved (string keyid, string keyname) {
	y2milestone("Trusted key has been removed: %1 (%2)", keyid, keyname);
	return nil;
    }
}
